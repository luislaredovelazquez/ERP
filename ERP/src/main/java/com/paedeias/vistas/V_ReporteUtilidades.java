/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.paedeias.vistas;

import com.paedeias.helpers.*;
import com.paedeias.identidades.*;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;




/**
 *
 * @author ALL
 */
public class V_ReporteUtilidades extends javax.swing.JPanel {

    /**
     * Creates new form V_ReporteParetto
     */
    public V_ReporteUtilidades() {
        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel2 = new javax.swing.JLabel();
        dateChooserCombo2 = new datechooser.beans.DateChooserCombo();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("De");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("a");

        jButton1.setBackground(new java.awt.Color(11, 70, 119));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Generar");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(11, 70, 119));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Exportar a hoja de cálculo");
        jButton3.setContentAreaFilled(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(11, 70, 119));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Resumen");
        jButton5.setContentAreaFilled(false);
        jButton5.setOpaque(true);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton3)
                        .addComponent(jButton5))
                    .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(14, 14, 14))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("0000.00");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Utilidad Neta");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("0000");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Cantidad");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("0000.00");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Precio");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("0000.00");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Costo");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("0000");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Artículos");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                                //------------- CAMBIO DE FORMATO -----------------
                     
                     final String OLD_FORMAT = "dd/MM/yy";
                     final String NEW_FORMAT = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString = dateChooserCombo1.getText();
                     String newDateString;

                     SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
                     Date d = null;
                      try {
                     d = sdf.parse(oldDateString);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf.applyPattern(NEW_FORMAT);
                     newDateString = sdf.format(d);
                     newDateString = newDateString + " 00:00:00";
                     
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     final String OLD_FORMAT2 = "dd/MM/yy";
                     final String NEW_FORMAT2 = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString2 = dateChooserCombo2.getText();
                     String newDateString2;

                     SimpleDateFormat sdf2 = new SimpleDateFormat(OLD_FORMAT2);
                     Date d2 = null;
                      try {
                     d2 = sdf2.parse(oldDateString2);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf2.applyPattern(NEW_FORMAT2);
                     newDateString2 = sdf.format(d2);
                     newDateString2 = newDateString2 + " 23:59:59";
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     hVentas hventas = new hVentas();
                     List<ReporteUtilidades> partidas = hventas.consultaVentasFechasUtilidades(newDateString, newDateString2);
                     List<ReporteUtilidades> partidasr = hventas.consultaVentasFechasUtilidadesR(newDateString, newDateString2);
                     hDevoluciones hdevoluciones = new hDevoluciones();
                     List<ReporteUtilidades> partidas2 = hdevoluciones.consultaVentasUtilidades(newDateString, newDateString2);
                     hVentaAnticipos hanticipos = new hVentaAnticipos();
                     List<ReporteUtilidades> partidas3 = hanticipos.consultaVentasFechasUtilidadesN(newDateString, newDateString2);
                     List<ReporteUtilidades> partidas3u = hanticipos.consultaVentasFechasUtilidadesU(newDateString, newDateString2);
                     
                  precioC=0;
                  gcosto=0;
                  gtotal=0;
                  gcantidad=0;
                  gprecio=0;
                  
                  totalcanv=0;
                  totalcostov=0;
                  totaltotalv =0;
                  totalpreciov = 0;
                  
                  for(int it=0; it<partidas.size(); it++)
                  {
                   precioC = Double.valueOf(partidas.get(it).getPrecio()) - Double.valueOf(partidas.get(it).getCosto());   
                   partidas.get(it).setUtilidadC(df.format(precioC));
                   gtotal = gtotal + (precioC * Integer.valueOf(partidas.get(it).getCantidad()));
                   gcosto = gcosto + (Double.valueOf(partidas.get(it).getCosto()) * Integer.valueOf(partidas.get(it).getCantidad()));
                   gcantidad = gcantidad + Integer.valueOf(partidas.get(it).getCantidad());
                   totalcanv = totalcanv + Integer.valueOf(partidas.get(it).getCantidad());
                   totalcostov = totalcostov + Double.valueOf(partidas.get(it).getCosto()) * Integer.valueOf(partidas.get(it).getCantidad());
                   totaltotalv = totaltotalv + (precioC * Integer.valueOf(partidas.get(it).getCantidad()));
                   totalpreciov = totalpreciov + (Double.valueOf(partidas.get(it).getPrecio()) * Integer.valueOf(partidas.get(it).getCantidad()));
                   gprecio = gprecio + (Double.valueOf(partidas.get(it).getPrecio()) * Integer.valueOf(partidas.get(it).getCantidad()));
                   utilidades.add(partidas.get(it));
                  }

                  totalcanr=0;
                  totalcostor=0;
                  totaltotalr =0;
                  totalprecior = 0;
                  
                  
                  for(int it=0; it<partidasr.size(); it++)
                  {
                   precioC = Double.valueOf(partidasr.get(it).getPrecio()) - Double.valueOf(partidasr.get(it).getCosto());   
                   partidasr.get(it).setUtilidadC(df.format(precioC));
                   gtotal = gtotal + (precioC * Integer.valueOf(partidasr.get(it).getCantidad()));
                   gcosto = gcosto + (Double.valueOf(partidasr.get(it).getCosto()) * Integer.valueOf(partidasr.get(it).getCantidad()));
                   gcantidad = gcantidad + Integer.valueOf(partidasr.get(it).getCantidad());
                   totalcanr = totalcanr + Integer.valueOf(partidasr.get(it).getCantidad());
                   totalcostor = totalcostor + Double.valueOf(partidasr.get(it).getCosto())  * Integer.valueOf(partidasr.get(it).getCantidad()); 
                   totaltotalr = totaltotalr + (precioC * Integer.valueOf(partidasr.get(it).getCantidad()));
                   totalprecior = totalprecior + (Double.valueOf(partidasr.get(it).getPrecio()) * Integer.valueOf(partidasr.get(it).getCantidad()));
                   gprecio = gprecio + (Double.valueOf(partidasr.get(it).getPrecio()) * Integer.valueOf(partidasr.get(it).getCantidad()));
                   utilidades.add(partidasr.get(it));
                  }

                  totalcana=0;
                  totalcostoa=0;
                  totaltotala =0;
                  totalprecioa = 0;
                  
                  
                  for(int it=0; it<partidas3.size(); it++)
                  {
                   precioC = Double.valueOf(partidas3.get(it).getPrecio()) - Double.valueOf(partidas3.get(it).getCosto());   
                   partidas3.get(it).setUtilidadC(df.format(precioC));     
                   gtotal = gtotal + (precioC * Integer.valueOf(partidas3.get(it).getCantidad()));
                   
                   gcosto = gcosto + (Double.valueOf(partidas3.get(it).getCosto()) * Integer.valueOf(partidas3.get(it).getCantidad()));
                   gcantidad = gcantidad + Integer.valueOf(partidas3.get(it).getCantidad());
                   utilidades.add(partidas3.get(it));
                   
                   totalcana = totalcana + Integer.valueOf(partidas3.get(it).getCantidad());
                   totalcostoa = totalcostoa + Double.valueOf(partidas3.get(it).getCosto())  * Integer.valueOf(partidas3.get(it).getCantidad());
                   totaltotala = totaltotala + (precioC * Integer.valueOf(partidas3.get(it).getCantidad()));
                   totalprecioa = totalprecioa + (Double.valueOf(partidas3.get(it).getPrecio()) * Integer.valueOf(partidas3.get(it).getCantidad()));
                   gprecio = gprecio + (Double.valueOf(partidas3.get(it).getPrecio()) * Integer.valueOf(partidas3.get(it).getCantidad()));
                  }                  
                  
                  totalcanau=0;
                  totalcostoau=0;
                  totaltotalau =0;
                  totalprecioau = 0;
                  
                  for(int it=0; it<partidas3u.size(); it++)
                  {
                   precioC = Double.valueOf(partidas3u.get(it).getPrecio()) - Double.valueOf(partidas3u.get(it).getCosto());   
                   partidas3u.get(it).setUtilidadC(df.format(precioC));     
                   gtotal = gtotal + (precioC * Integer.valueOf(partidas3u.get(it).getCantidad()));
                   
                   gcosto = gcosto + (Double.valueOf(partidas3u.get(it).getCosto()) * Integer.valueOf(partidas3u.get(it).getCantidad()));
                   gcantidad = gcantidad + Integer.valueOf(partidas3u.get(it).getCantidad());
                   utilidades.add(partidas3u.get(it));
                   
                   totalcanau = totalcanau + Integer.valueOf(partidas3u.get(it).getCantidad());
                   totalcostoau = totalcostoau + Double.valueOf(partidas3u.get(it).getCosto())  * Integer.valueOf(partidas3u.get(it).getCantidad());
                   totaltotalau = totaltotalau + (precioC * Integer.valueOf(partidas3u.get(it).getCantidad()));
                   totalprecioau = totalprecioau + (Double.valueOf(partidas3u.get(it).getPrecio()) * Integer.valueOf(partidas3u.get(it).getCantidad()));
                   gprecio = gprecio + (Double.valueOf(partidas3u.get(it).getPrecio()) * Integer.valueOf(partidas3u.get(it).getCantidad()));
                  }

                  totalcand=0;
                  totalcostod=0;
                  totaltotald =0;
                  totalpreciod = 0;
                  
                  for(int it=0; it<partidas2.size(); it++)
                  {
                   precioC = Double.valueOf(partidas2.get(it).getPrecio()) - Double.valueOf(partidas2.get(it).getCosto());   
                   partidas2.get(it).setUtilidadC(df.format(precioC));   
                 //  gtotal = gtotal - precioC;
                 //  gcantidad = gcantidad + Integer.valueOf(partidas2.get(it).getCantidad());
                   utilidades.add(partidas2.get(it));

                   totalcand = totalcand + Integer.valueOf(partidas2.get(it).getCantidad());
                   totalcostod = totalcostod + (Double.valueOf(partidas2.get(it).getCosto())* Integer.valueOf(partidas2.get(it).getCantidad()));
                   totaltotald = totaltotald + (precioC * Integer.valueOf(partidas2.get(it).getCantidad()));
                   totalpreciod = totalpreciod + (Double.valueOf(partidas2.get(it).getPrecio()) * Integer.valueOf(partidas2.get(it).getCantidad()));
                  }
                  
                  
                  double utilP=0;
                  double pacumulado=0;
                  double  total = 0;
                  //  falta agregar la lista a la tabla y ver como queda....
                  if(!vector.isEmpty())  
                  vector.clear();    
                  int it1 = 0;

                  
                  id1 = vector.size();
                  Vector<Object> vecten1 = new Vector();
                  vecten1.add("");    
                  vecten1.add("");
                  vecten1.add("VENTAS");
                  vecten1.add("");
                  vecten1.add("");
                  vecten1.add("");                  
                  vecten1.add("");
                  vecten1.add("");
                  vecten1.add("");
                  vector.add(vecten1);
                  
                  
                  while(it1 < partidas.size())
                  {
                  utilP = Double.valueOf(partidas.get(it1).getUtilidadC()) * 100 / Double.valueOf(partidas.get(it1).getPrecio());
                  partidas.get(it1).setUtilidadP(df2.format(utilP));
                  pacumulado = Integer.valueOf(partidas.get(it1).getCantidad()) * utilP;    
                  partidas.get(it1).setUtilidadA(df2.format(pacumulado));
                  Vector<Object> vect = new Vector();
                  vect.add(partidas.get(it1).getNumeracion());    
                  vect.add(partidas.get(it1).getCodigo());
                  vect.add(partidas.get(it1).getDescripcion());
                  vect.add(partidas.get(it1).getCantidad());
                  vect.add(partidas.get(it1).getPrecio());
                  vect.add(partidas.get(it1).getCosto());                  
                  vect.add(partidas.get(it1).getUtilidadC());
               //   total = Double.valueOf(partidas.get(it1).getPrecio())-Double.valueOf(partidas.get(it1).getCosto());
               //   vect.add(df2.format(total));
                  vect.add(partidas.get(it1).getUtilidadP());
                  vect.add(df2.format(pacumulado));
                  vector.add(vect);
                  it1++;    
                  }
                  
                  
                  
                  id2 = vector.size();
                  Vector<Object> vectpie1 = new Vector();
                  vectpie1.add("--");    
                  vectpie1.add("--");
                  vectpie1.add("TOTAL VENTAS");
                  vectpie1.add(totalcanv);
                  vectpie1.add(df.format(totalpreciov));
                  vectpie1.add(df.format(totalcostov));                  
                  vectpie1.add(df.format(totaltotalv));
                  double totalutil = totaltotalv * 100 / totalpreciov;
                  vectpie1.add(df.format(totalutil));
                  vectpie1.add(df.format(totalutil * totalcanv));
                  vector.add(vectpie1);
                  id3 = vector.size();
                  Vector<Object> vecten1r = new Vector();
                  vecten1r.add("");    
                  vecten1r.add("");
                  vecten1r.add("RESERVACIONES");
                  vecten1r.add("");
                  vecten1r.add("");
                  vecten1r.add("");                  
                  vecten1r.add("");
                  vecten1r.add("");
                  vecten1r.add("");
                  vector.add(vecten1r);
                  
                  
                  for(int itr = 0; itr<partidasr.size(); itr++)
                  {
                  utilP = Double.valueOf(partidasr.get(itr).getUtilidadC()) * 100 / Double.valueOf(partidasr.get(itr).getPrecio());
                  partidasr.get(itr).setUtilidadP(df2.format(utilP));
                  pacumulado = Integer.valueOf(partidasr.get(itr).getCantidad()) * utilP;    
                  partidasr.get(itr).setUtilidadA(df2.format(pacumulado));
                  Vector<Object> vect = new Vector();
                  vect.add(partidasr.get(itr).getNumeracion());    
                  vect.add(partidasr.get(itr).getCodigo());
                  vect.add(partidasr.get(itr).getDescripcion());
                  vect.add(partidasr.get(itr).getCantidad());
                  vect.add(partidasr.get(itr).getPrecio());
                  vect.add(partidasr.get(itr).getCosto());                  
                  vect.add(partidasr.get(itr).getUtilidadC());
               //   total = Double.valueOf(partidas.get(it1).getPrecio())-Double.valueOf(partidas.get(it1).getCosto());
               //   vect.add(df2.format(total));
                  vect.add(partidasr.get(itr).getUtilidadP());
                  vect.add(df2.format(pacumulado));
                  vector.add(vect);
                  }
                  id4 = vector.size();
                  Vector<Object> vectpie1r = new Vector();
                  vectpie1r.add("--");    
                  vectpie1r.add("--");
                  vectpie1r.add("TOTAL RESERVACIONES");
                  vectpie1r.add(totalcanr);
                  vectpie1r.add(df.format(totalprecior));
                  vectpie1r.add(df.format(totalcostor));                  
                  vectpie1r.add(df.format(totaltotalr));
                  double totalutilr = totaltotalr * 100 / totalprecior;
                  vectpie1r.add(df.format(totalutilr));
                  vectpie1r.add(df.format(totalutilr * totalcanr));
                  vector.add(vectpie1r);
                  id5 = vector.size();
                  Vector<Object> vecten2 = new Vector();
                  vecten2.add("");    
                  vecten2.add("");
                  vecten2.add("ANTICIPOS NUEVOS");
                  vecten2.add("");
                  vecten2.add("");
                  vecten2.add("");                  
                  vecten2.add("");
                  vecten2.add("");
                  vecten2.add("");
                  vector.add(vecten2);
                  
                  int it3 = 0;
                  while(it3 < partidas3.size())
                  {
                  utilP = Double.valueOf(partidas3.get(it3).getUtilidadC()) * 100 / Double.valueOf(partidas3.get(it3).getPrecio());
                  partidas3.get(it3).setUtilidadP(df2.format(utilP));    
                  pacumulado = Integer.valueOf(partidas3.get(it3).getCantidad()) * utilP;    
                  partidas3.get(it3).setUtilidadA(df2.format(pacumulado));
                  Vector<Object> vect = new Vector();
                  vect.add(partidas3.get(it3).getNumeracion());    
                  vect.add(partidas3.get(it3).getCodigo());
                  vect.add(partidas3.get(it3).getDescripcion());
                  vect.add(partidas3.get(it3).getCantidad());
                  vect.add(partidas3.get(it3).getPrecio());
                  vect.add(partidas3.get(it3).getCosto());
                  vect.add(partidas3.get(it3).getUtilidadC());
               //   total = Double.valueOf(partidas3.get(it3).getPrecio())-Double.valueOf(partidas3.get(it3).getCosto());
               //   vect.add(df2.format(total));
                  vect.add(partidas3.get(it3).getUtilidadP());
                  vect.add(df2.format(pacumulado));
                  vector.add(vect);
                  it3++;    
                  }
                  id6 = vector.size();
                  Vector<Object> vectpie2 = new Vector();
                  vectpie2.add("--");    
                  vectpie2.add("--");
                  vectpie2.add("TOTAL ANTICIPOS NUEVOS");
                  vectpie2.add(totalcana);
                  vectpie2.add(df.format(totalprecioa));
                  vectpie2.add(df.format(totalcostoa));                  
                  vectpie2.add(df.format(totaltotala));
                  double totalutilan = totaltotala * 100 / totalprecioa;
                  vectpie2.add(df.format(totalutilan));
                  vectpie2.add(df.format(totalutilan * totalcana));
                  vector.add(vectpie2);
                  id7 = vector.size();
                  Vector<Object> vecten2u = new Vector();
                  vecten2u.add("");    
                  vecten2u.add("");
                  vecten2u.add("ANTICIPOS USADOS");
                  vecten2u.add("");
                  vecten2u.add("");
                  vecten2u.add("");                  
                  vecten2u.add("");
                  vecten2u.add("");
                  vecten2u.add("");
                  vector.add(vecten2u);
                  
                  
                  for(int it3u=0; it3u<partidas3u.size(); it3u++)
                  {
                  utilP = Double.valueOf(partidas3u.get(it3u).getUtilidadC()) * 100 / Double.valueOf(partidas3u.get(it3u).getPrecio());
                  partidas3u.get(it3u).setUtilidadP(df2.format(utilP));    
                  pacumulado = Integer.valueOf(partidas3u.get(it3u).getCantidad()) * utilP;    
                  partidas3u.get(it3u).setUtilidadA(df2.format(pacumulado));
                  Vector<Object> vect = new Vector();
                  vect.add(partidas3u.get(it3u).getNumeracion());    
                  vect.add(partidas3u.get(it3u).getCodigo());
                  vect.add(partidas3u.get(it3u).getDescripcion());
                  vect.add(partidas3u.get(it3u).getCantidad());
                  vect.add(partidas3u.get(it3u).getPrecio());
                  vect.add(partidas3u.get(it3u).getCosto());
                  vect.add(partidas3u.get(it3u).getUtilidadC());
               //   total = Double.valueOf(partidas3.get(it3).getPrecio())-Double.valueOf(partidas3.get(it3).getCosto());
               //   vect.add(df2.format(total));
                  vect.add(partidas3u.get(it3u).getUtilidadP());
                  vect.add(df2.format(pacumulado));
                  vector.add(vect); 
                  }
                  id8 = vector.size();
                  Vector<Object> vectpie2u = new Vector();
                  vectpie2u.add("--");    
                  vectpie2u.add("--");
                  vectpie2u.add("TOTAL ANTICIPOS USADOS");
                  vectpie2u.add(totalcanau);
                  vectpie2u.add(df.format(totalprecioau));
                  vectpie2u.add(df.format(totalcostoau));                  
                  vectpie2u.add(df.format(totaltotalau));
                  double totalutilau = totaltotalau * 100 / totalprecioau;
                  vectpie2u.add(df.format(totalutilau));
                  vectpie2u.add(df.format(totalutilau * totalcanau));
                  vector.add(vectpie2u);
                  id9 = vector.size();
                  Vector<Object> vecten3 = new Vector();
                  vecten3.add("");    
                  vecten3.add("");
                  vecten3.add("DEVOLUCIONES");
                  vecten3.add("");
                  vecten3.add("");
                  vecten3.add("");                  
                  vecten3.add("");
                  vecten3.add("");
                  vecten3.add("");
                  vector.add(vecten3);
                  
                  int it2 = 0;
                  while(it2 < partidas2.size())
                  {
                  partidas2.get(it2).setUtilidadP("0.00");    
                  partidas2.get(it2).setUtilidadA("0.00");    
                  Vector<Object> vect = new Vector();
                  vect.add(partidas2.get(it2).getNumeracion());    
                  vect.add(partidas2.get(it2).getCodigo());
                  vect.add(partidas2.get(it2).getDescripcion());
                  vect.add(partidas2.get(it2).getCantidad());
                  vect.add(partidas2.get(it2).getPrecio());
                  vect.add(partidas2.get(it2).getCosto());
                  vect.add(partidas2.get(it2).getUtilidadC());
               //   total = Double.valueOf(partidas2.get(it2).getPrecio())-Double.valueOf(partidas2.get(it2).getCosto());
              //    vect.add(df2.format(total));
                  vect.add("0.00");
                  vect.add("0.00");
                  vector.add(vect);
                  it2++;    
                  }
                  id10 = vector.size();
                  Vector<Object> vectpie3 = new Vector();
                  vectpie3.add("--");    
                  vectpie3.add("--");
                  vectpie3.add("TOTAL DEVOLUCIONES");
                  vectpie3.add(totalcand);
                  vectpie3.add(df.format(totalpreciod));
                  vectpie3.add(df.format(totalcostod));                  
                  vectpie3.add(df.format(totaltotald));
                  vectpie3.add("0.00");
                  vectpie3.add("0.00");
                  vector.add(vectpie3);
                  
                  dtm.fireTableDataChanged();
                  

                  
                  
                  jLabel7.setText(df.format(gprecio));
                  jLabel9.setText(df.format(gcosto));
                  jLabel5.setText(String.valueOf(gcantidad));
                  jLabel3.setText(df.format(gtotal));
                  jLabel11.setText(String.valueOf(partidas.size() + partidas2.size() + partidas3.size()));
                  
                  jTable1.getSelectionModel().addSelectionInterval(id1, id1);
                  jTable1.getSelectionModel().addSelectionInterval(id2, id2);
                  jTable1.getSelectionModel().addSelectionInterval(id3, id3);
                  jTable1.getSelectionModel().addSelectionInterval(id4, id4);
                  jTable1.getSelectionModel().addSelectionInterval(id5, id5);
                  jTable1.getSelectionModel().addSelectionInterval(id6, id6);
                  jTable1.getSelectionModel().addSelectionInterval(id7, id7);
                  jTable1.getSelectionModel().addSelectionInterval(id8, id8);
                  jTable1.getSelectionModel().addSelectionInterval(id9, id9);
                  jTable1.getSelectionModel().addSelectionInterval(id10, id10);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
                if(utilidades.size() == 0)
        {
            JOptionPane.showMessageDialog(null,"Por favor seleccione partidas antes de generar el reporte");
            return;
        }
        
        FileOutputStream fos = null;
        try {
            hCuentasPorCobrar hcc = new hCuentasPorCobrar();
            // TODO add your handling code here:
            Workbook wb = new XSSFWorkbook();
            fos = new FileOutputStream("reporteUtilidades\\reporteUtilidades"+hcc.generarFecha().substring(0,10) +".xlsx");
            Sheet sh = wb.createSheet(hcc.generarFecha().substring(0,10));
            
            Row encabezado = sh.createRow((short)0);
            Cell eA1 = encabezado.createCell((short)0);
            eA1.setCellValue("Número");
            Cell eB1 = encabezado.createCell((short)1);
            eB1.setCellValue("Código");
            Cell eC1 = encabezado.createCell((short)2);
            eC1.setCellValue("Descripción");
            Cell eD1 = encabezado.createCell((short)3);
            eD1.setCellValue("Cantidad");
            Cell eF1 = encabezado.createCell((short)5);
            eF1.setCellValue("Precio");
            Cell eE1 = encabezado.createCell((short)4);
            eE1.setCellValue("Costo");
            Cell eG1 = encabezado.createCell((short)6);
            eG1.setCellValue("Diferencia");
            Cell eH1 = encabezado.createCell((short)7);
            eH1.setCellValue("Porcentaje");
            Cell eI1 = encabezado.createCell((short)8);
            eI1.setCellValue("Porcentaje Acumulado");
            
            
            double pacumulado = 0;
            
            for(int it=1; it<utilidades.size()+1; it++)
            {
            pacumulado = pacumulado + Double.valueOf(utilidades.get(it-1).getUtilidadP());    
                
            Row fila = sh.createRow((short)it);    
            Cell eL1 = fila.createCell((short)0);
            eL1.setCellValue(Double.valueOf(utilidades.get(it-1).getNumeracion()));
            Cell eL2 = fila.createCell((short)1);
            eL2.setCellValue(utilidades.get(it-1).getCodigo());
            Cell eL3 = fila.createCell((short)2);
            eL3.setCellValue(utilidades.get(it-1).getDescripcion());
            Cell eL4 = fila.createCell((short)3);
            eL4.setCellValue(utilidades.get(it-1).getCantidad());
            Cell eL5 = fila.createCell((short)4);
            eL5.setCellValue(utilidades.get(it-1).getCosto());
            Cell eL6 = fila.createCell((short)5);
            eL6.setCellValue(utilidades.get(it-1).getPrecio());
            Cell eL7 = fila.createCell((short)6);
            eL7.setCellValue(utilidades.get(it-1).getUtilidadC());
            Cell eL8 = fila.createCell((short)7);
            eL8.setCellValue(utilidades.get(it-1).getUtilidadP());
            Cell eL9 = fila.createCell((short)8);
            eL9.setCellValue(utilidades.get(it-1).getUtilidadA());
            }
            
            Row totales = sh.createRow((short)utilidades.size()+2);
            Cell tL4 = totales.createCell((short)3);
            tL4.setCellValue(gcantidad);
            Cell tL7 = totales.createCell((short)5);
            tL7.setCellValue(gprecio);
            Cell tL8 = totales.createCell((short)4);
            tL8.setCellValue(gcosto);
            Cell tL11 = totales.createCell((short)11);
            tL11.setCellValue("Diferencia:");            
            Cell tL12 = totales.createCell((short)12);
            tL12.setCellValue(gtotal);                  
            
            
            wb.write(fos);
            fos.close();
            
            
             } catch (IOException ex) {
            Logger.getLogger(V_ReporteUtilidades.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fos.close();
            } catch (IOException ex) {
                Logger.getLogger(V_ReporteUtilidades.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
         JOptionPane.showMessageDialog(null, "Reporte Generado!");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
                  jTable1.getSelectionModel().addSelectionInterval(id1, id1);
                  jTable1.getSelectionModel().addSelectionInterval(id2, id2);
                  jTable1.getSelectionModel().addSelectionInterval(id3, id3);
                  jTable1.getSelectionModel().addSelectionInterval(id4, id4);
                  jTable1.getSelectionModel().addSelectionInterval(id5, id5);
                  jTable1.getSelectionModel().addSelectionInterval(id6, id6);
                  jTable1.getSelectionModel().addSelectionInterval(id7, id7);
                  jTable1.getSelectionModel().addSelectionInterval(id8, id8);
                  jTable1.getSelectionModel().addSelectionInterval(id9, id9);
                  jTable1.getSelectionModel().addSelectionInterval(id10, id10);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        V_ReporteUtilidades.TablaResumen seleccionar = new V_ReporteUtilidades.TablaResumen();
        JDialog dialogo = new JDialog((JFrame)Window.getWindows()[0],"Resumen",true);
        dialogo.getContentPane().add(seleccionar);
        dialogo.setSize(500, 600);
        dialogo.setLocationRelativeTo((JFrame)Window.getWindows()[0]);
        dialogo.setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private datechooser.beans.DateChooserCombo dateChooserCombo2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel dtm;
    Vector vector,vectorEncabezado;
    List<ReporteUtilidades> utilidades; 
    DecimalFormat df;
    DecimalFormat df2;
    double precioC=0;
    double gprecio=0;
    double gcosto=0;
    double gtotal=0;
    double gcantidad=0;
    int id1=0;
    int id2=0;
    int id3=0;
    int id4=0;
    int id5=0;
    int id6=0;
    int id7=0;
    int id8=0;
    int id9=0;
    int id10=0;
    
    int totalcanv=0;
    double totalcostov=0;
    double totaltotalv =0;
    double totalpreciov = 0;
    
    int totalcanr=0;
    double totalcostor=0;
    double totaltotalr =0;
    double totalprecior = 0;
    
    int totalcana=0;
    double totalcostoa=0;
    double totaltotala =0;
    double totalprecioa = 0;
    
    int totalcanau=0;
    double totalcostoau=0;
    double totaltotalau =0;
    double totalprecioau = 0;
    
    int totalcand=0;
    double totalcostod=0;
    double totaltotald =0;
    double totalpreciod = 0;
    
    public void inicializar()
    {
        df = new DecimalFormat("0.00");
        df2 = new DecimalFormat("0.000");
        utilidades = new ArrayList<ReporteUtilidades>();   
        vectorEncabezado = new Vector();
        vector = new Vector();
        
        vectorEncabezado.add("N");
        vectorEncabezado.add("Código");
        vectorEncabezado.add("Descripción");
        vectorEncabezado.add("Cantidad");
        vectorEncabezado.add("Precio");
        vectorEncabezado.add("Costo");
        vectorEncabezado.add("Diferencia");
        vectorEncabezado.add("Porcentaje");
        vectorEncabezado.add("Porcentaje Acumulado");
        
        dtm = new DefaultTableModel(vector, vectorEncabezado) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };
        jTable1.setModel(dtm);  
        
        
        jTable1.getColumn("N").setPreferredWidth(10);
        jTable1.getColumn("Código").setPreferredWidth(100);
        jTable1.getColumn("Descripción").setPreferredWidth(450);
        jTable1.getColumn("Cantidad").setPreferredWidth(100);
    //    jTable1.getColumn("Cantidad").setPreferredWidth(20);
        
        
    }
    
    
    public class TablaResumen extends JPanel   {

    JPanel panelPrincipal, panelEncabezado, panelTabla,fila1,fila2;
    JTable tablaResumen;
    Vector vectorResumen,encabezadoResumen;
    DefaultTableModel dtmResumen;
    JButton boton;

    public TablaResumen(){

     setLayout(new GridLayout());
     panelPrincipal = new JPanel();
     panelPrincipal.setLayout(new BorderLayout());
     panelEncabezado = new JPanel();
     panelEncabezado.setLayout(new GridLayout(2,1));
     fila1 = new JPanel();
     fila2 = new JPanel();
     fila1.setLayout(new FlowLayout(FlowLayout.RIGHT));
     fila2.setLayout(new FlowLayout());
     

     tablaResumen = new JTable();

     encabezadoResumen = new Vector<String>();
     encabezadoResumen.add("Área");
     encabezadoResumen.add("Cantidad");
     encabezadoResumen.add("Total Costo");
     encabezadoResumen.add("Total Precio");
     encabezadoResumen.add("Total Utilidad");
     encabezadoResumen.add("Porcentaje Utilidad");
     encabezadoResumen.add("A. Porcentaje Utilidad");
     
     vectorResumen = new Vector();
     
     Vector<Object> vecten1r = new Vector();
     vecten1r.add("VENTAS");    
     vecten1r.add(df.format(totalcanv));
     vecten1r.add(df.format(totalcostov));
     vecten1r.add(df.format(totalpreciov));
     vecten1r.add(df.format(totaltotalv));
     double totalutilv = totaltotalv * 100 / totalpreciov;
     vecten1r.add(df.format(totalutilv));
     vecten1r.add(df.format(totalutilv * totalcanv));
     
     vectorResumen.add(vecten1r);
     
     Vector<Object> vecten2r = new Vector();
     vecten2r.add("RESERVACIONES");    
     vecten2r.add(df.format(totalcanr));
     vecten2r.add(df.format(totalcostor));
     vecten2r.add(df.format(totalprecior));
     vecten2r.add(df.format(totaltotalr));
     double totalutilr = totaltotalr * 100 / totalprecior;
     vecten2r.add(df.format(totalutilr));
     vecten2r.add(df.format(totalutilr * totalcanr));
     
     vectorResumen.add(vecten2r);
     
     Vector<Object> vecten3r = new Vector();
     vecten3r.add("ANTICIPOS NUEVO");    
     vecten3r.add(df.format(totalcana));
     vecten3r.add(df.format(totalcostoa));
     vecten3r.add(df.format(totalprecioa));
     vecten3r.add(df.format(totaltotala));
     double totalutila = totaltotala * 100 / totalprecioa;
     vecten3r.add(df.format(totalutila));
     vecten3r.add(df.format(totalutila * totalcana));
     
     vectorResumen.add(vecten3r);
     
     Vector<Object> vecten4r = new Vector();
     vecten4r.add("ANTICIPOS USADO");    
     vecten4r.add(df.format(totalcanau));
     vecten4r.add(df.format(totalcostoau));
     vecten4r.add(df.format(totalprecioau));
     vecten4r.add(df.format(totaltotalau));
     double totalutilau = totaltotalau * 100 / totalprecioau;
     vecten4r.add(df.format(totalutilau));
     vecten4r.add(df.format(totalutilau * totalcanau));
     
     vectorResumen.add(vecten4r);     
     
     Vector<Object> vecten5r = new Vector();
     vecten5r.add("DEVOLUCIONES");    
     vecten5r.add(df.format(totalcand));
     vecten5r.add(df.format(totalcostod));
     vecten5r.add(df.format(totalpreciod));
     vecten5r.add(df.format(totaltotald));
     double totalutild = totaltotald * 100 / totalpreciod;
     vecten5r.add(df.format(totalutild));
     vecten5r.add(df.format(totalutild * totalcand));
     
     vectorResumen.add(vecten5r);          
     
      dtmResumen = new DefaultTableModel(vectorResumen,encabezadoResumen) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              }; 

      tablaResumen.setModel(dtmResumen);
      boton = new JButton("Imprimir");
      
      boton.addActionListener(new ActionListener(){

                public void actionPerformed(ActionEvent e) {
                            // TODO add your handling code here:
                   try {
           MessageFormat header = new MessageFormat("RESUMEN DE UTILIDADES "+dateChooserCombo1.getText()+" - "+dateChooserCombo2.getText());
           MessageFormat footer = new MessageFormat("Utilidad "+jLabel7.getText()+"Costo "+jLabel9.getText()+"Cantidad "+jLabel5.getText()+
                                                    "Neto "+jLabel3.getText()+"Artículos "+jLabel11.getText()+" Página {0,number,integer}");
           tablaResumen.print(JTable.PrintMode.NORMAL, header, footer);                
           }   catch (PrinterException ex) {
            Logger.getLogger(V_ReporteDAlmacen.class.getName()).log(Level.SEVERE, null, ex);
        }  
                    
                }
      });

      fila1.add(boton);
      panelEncabezado.add(fila1);
      panelEncabezado.add(fila2);

      panelPrincipal.add(new JScrollPane(tablaResumen), BorderLayout.CENTER);
      panelPrincipal.add(panelEncabezado,BorderLayout.NORTH);

      add(panelPrincipal);

    }

}
    
    
    
}
