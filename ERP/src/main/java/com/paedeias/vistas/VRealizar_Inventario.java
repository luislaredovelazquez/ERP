/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.paedeias.vistas;

import com.paedeias.controladores.CConfiguracion;
import com.paedeias.controladores.CPrincipal;
import com.paedeias.controladores.ManejoInventario;
import com.paedeias.controladores.Validadores;
import com.paedeias.helpers.*;
import com.paedeias.identidades.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALL
 */
public class VRealizar_Inventario extends javax.swing.JPanel {

    /**
     * Creates new form Realizar_Inventario
     */
    public VRealizar_Inventario() {
        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Realizar Acción"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Ruta del Archivo");

        jTextField1.setEditable(false);

        jButton1.setBackground(new java.awt.Color(11, 70, 119));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Buscar");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);

        jButton3.setBackground(new java.awt.Color(11, 70, 119));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Realizar Inventario");
        jButton3.setContentAreaFilled(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(11, 70, 119));
        jButton9.setForeground(new java.awt.Color(255, 255, 255));
        jButton9.setText("Cambiar Ubicación");
        jButton9.setContentAreaFilled(false);
        jButton9.setOpaque(true);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton9))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setToolTipText("");
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setToolTipText("");
        jScrollPane2.setViewportView(jTable2);

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable4.setToolTipText("");
        jScrollPane4.setViewportView(jTable4);

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable5.setToolTipText("");
        jScrollPane5.setViewportView(jTable5);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Sistema");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Iguales");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Faltantes");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Sobrantes");

        jButton4.setBackground(new java.awt.Color(11, 70, 119));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("1. Actualizar Kardex/Catálogo");
        jButton4.setContentAreaFilled(false);
        jButton4.setOpaque(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(11, 70, 119));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("3.- Actualizar Kardex/Catálogo");
        jButton5.setContentAreaFilled(false);
        jButton5.setOpaque(true);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(11, 70, 119));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("2. Actualizar Kardex/Catálogo");
        jButton6.setContentAreaFilled(false);
        jButton6.setOpaque(true);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(11, 70, 119));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("5.- Agregar Piezas");
        jButton7.setContentAreaFilled(false);
        jButton7.setOpaque(true);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(11, 70, 119));
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("4.- Actualiza no capturados");
        jButton10.setContentAreaFilled(false);
        jButton10.setOpaque(true);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jButton4))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         // TODO add your handling code here:
        if(jTextField1.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero un archivo");
            return;
        }
        
        invtb2.clear();
        for(int u=0; u<invtb1.size(); u++)
        {
        invtb2.add(invtb1.get(u));    
        }
        invtb3.clear();
        
        listatb2.clear();
        listatb3.clear();
        listatb4.clear();
        
        vectort3.clear();
        vectort4.clear();
        vectort2.clear();

        
        ManejoInventario manejoinventarios = new ManejoInventario();
        List<Inventario> capturados= new ArrayList<Inventario>();
        
     capturados = manejoinventarios.leerArchivo(jTextField1.getText()); //capturados tiene todos los códigos capturados en el inventario fisico
     for(int i=0; i<invtb2.size(); i++)
     {
         for(int o=0; o<capturados.size(); o++)
         {
             if(invtb2.get(i).getCodigo().equals(capturados.get(o).getCodigo()))
             {
                 invtb2.get(i).setFisico(capturados.get(o).getFisico());
                 int diferencia = invtb2.get(i).getFisico() - invtb2.get(i).getSistema();
                 invtb2.get(i).setDiferencia(diferencia);
                 invtb3.add(invtb2.get(i));
                 
                 // invtb2.remove(i); //así quedan únicamente los que están en el sistema
                 for(int reme=0; reme<invtb1.size(); reme++)
                 {
             if(invtb2.get(i).getCodigo().equals(invtb1.get(reme).getCodigo()))
             {
                 invtb1.remove(reme);
             }                     
                 }
                 capturados.remove(o); //así quedan únicamente los que están de manera física
                 
             }
         }
     }
     
     for(int i=0; i<invtb3.size(); i++)
     {
         if(invtb3.get(i).getDiferencia() < 0)
                 {
                 Vector vect3 = new Vector<Inventario>();
                 vect3.add(invtb3.get(i).getCodigo());
                 vect3.add(invtb3.get(i).getDescripcion());
                 vect3.add(invtb3.get(i).getSistema());
                 vect3.add(invtb3.get(i).getFisico());
                 vect3.add(invtb3.get(i).getDiferencia());
                 vect3.add(invtb3.get(i).getPrecioCompra());
                 vect3.add(invtb3.get(i).getPrecioCompra() * invtb3.get(i).getDiferencia());
                 vect3.add(invtb3.get(i).getFisico());     
                 vect3.add(invtb3.get(i).getFila());
                 listatb3.add(invtb3.get(i));
                 vectort3.add(vect3);                 
                 }
          else if(invtb3.get(i).getDiferencia() > 0)
                 {
                 Vector vect4 = new Vector<Inventario>();
                 vect4.add(invtb3.get(i).getCodigo());
                 vect4.add(invtb3.get(i).getDescripcion());
                 vect4.add(invtb3.get(i).getSistema());
                 vect4.add(invtb3.get(i).getFisico());
                 vect4.add(invtb3.get(i).getDiferencia());
                 vect4.add(invtb3.get(i).getPrecioCompra());
                 vect4.add(invtb3.get(i).getPrecioCompra() * invtb3.get(i).getDiferencia());
                 vect4.add(invtb3.get(i).getFisico());
                 vect4.add(invtb3.get(i).getFila());
                 nuevosArticulos.add(invtb3.get(i));
                 listatb4.add(invtb3.get(i));
                 vectort4.add(vect4);
                 }else
          {
                 Vector vect2 = new Vector<Inventario>();
                 vect2.add(invtb3.get(i).getCodigo());
                 vect2.add(invtb3.get(i).getDescripcion());
                 vect2.add(invtb3.get(i).getSistema());
                 vect2.add(invtb3.get(i).getFisico());
                 vect2.add(invtb3.get(i).getDiferencia());
                 vect2.add(invtb3.get(i).getPrecioCompra());
                 vect2.add(invtb3.get(i).getPrecioCompra() * invtb3.get(i).getDiferencia());
                 vect2.add(invtb3.get(i).getFisico());
                 vect2.add(invtb3.get(i).getFila());
                 listatb2.add(invtb3.get(i));
                 vectort2.add(vect2);
          }
     }
     
        Vector encabezadoDif = new Vector<Inventario>();
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         encabezadoDif.add("-------------");
         vectort3.add(encabezadoDif);    
            
     for(int a=0; a<invtb1.size(); a++)
     {
         invtb1.get(a).setFisico(0);
         int diferencia = invtb1.get(a).getFisico() - invtb1.get(a).getSistema();
         invtb1.get(a).setDiferencia(diferencia);
         if(diferencia == 0) //se mandan todos los articulos que tienen cero en sistema y cero en fisico para que después se puedan actualizar como iguales...
         {
         Vector vect3 = new Vector<Inventario>();
         vect3.add(invtb1.get(a).getCodigo());
         vect3.add(invtb1.get(a).getDescripcion());
         vect3.add(invtb1.get(a).getSistema());
         vect3.add(invtb1.get(a).getFisico());
         vect3.add(invtb1.get(a).getDiferencia());
         vect3.add(invtb1.get(a).getPrecioCompra());
         vect3.add(invtb1.get(a).getDiferencia() * invtb1.get(a).getPrecioCompra());
         vect3.add(invtb1.get(a).getFisico());
         vect3.add(invtb1.get(a).getFila());
         listatb2.add(invtb1.get(a));
         vectort2.add(vect3);
         } 
         else 
         {
         Vector vect3 = new Vector<Inventario>();
         vect3.add(invtb1.get(a).getCodigo());
         vect3.add(invtb1.get(a).getDescripcion());
         vect3.add(invtb1.get(a).getSistema());
         vect3.add(invtb1.get(a).getFisico());
         vect3.add(invtb1.get(a).getDiferencia());
         vect3.add(invtb1.get(a).getPrecioCompra());
         vect3.add(invtb1.get(a).getDiferencia() * invtb1.get(a).getPrecioCompra());
         vect3.add(invtb1.get(a).getFisico());
         vect3.add(invtb1.get(a).getFila());
         listatb3.add(invtb1.get(a));
         vectort3.add(vect3);    
         }
     }
     
         Vector encabezadoSob = new Vector<Inventario>();
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         encabezadoSob.add("-------------");
         vectort4.add(encabezadoSob);    
     
     for(int e=0; e<capturados.size(); e++)
     {
         capturados.get(e).setSistema(0);
         capturados.get(e).setFila("NO IDENTIFICADA");
         int diferencia = capturados.get(e).getFisico() - capturados.get(e).getSistema();
         capturados.get(e).setDiferencia(diferencia);
         if(diferencia!=0)
         {
         Vector vect3 = new Vector<Inventario>();
         vect3.add(capturados.get(e).getCodigo());
         vect3.add(capturados.get(e).getDescripcion());
         vect3.add(capturados.get(e).getSistema());
         vect3.add(capturados.get(e).getFisico());
         vect3.add(capturados.get(e).getDiferencia());
         vect3.add(capturados.get(e).getPrecioCompra());
         vect3.add(capturados.get(e).getDiferencia() * capturados.get(e).getPrecioCompra());
         vect3.add(capturados.get(e).getFisico());
         vect3.add(capturados.get(e).getFila());
         nuevosArticulos.add(capturados.get(e));
         vectort4.add(vect3);    
         }
     }
     
        dtm2.fireTableDataChanged();
        dtm3.fireTableDataChanged();
        dtm4.fireTableDataChanged(); 
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:      
        //tabla 2
        for(int i=0;i<listatb2.size();i++)
        {
        renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb2.get(i).getCodigo()); 
        
        kardex.setAlmacenista(CConfiguracion.getFoto());
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setEntrada(0);
        kardex.setExistencias(renglon.getExistencias()); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario");
        kardex.setMovimiento("Actualización de Inventario");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setSalida(0);
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
        }
                
        JOptionPane.showMessageDialog(null, "Kardex y Catálogos Actualizados");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        for(int a=0; a< listatb3.size(); a++)
        {
            if(!dtm3.getValueAt(a,7).toString().equals("-------------"))
            {
            try
            {
          Integer.valueOf(dtm3.getValueAt(a,7).toString());    
          Integer.valueOf(dtm3.getValueAt(a,2).toString());                        
            }catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Uno de los campos no es un número entero");
                return;
            }
            }
        }
        
        //tabla 3
        for(int i=0;i<listatb3.size();i++)
        {
             if(!dtm3.getValueAt(i,7).toString().equals("-------------"))
            {    
        corregido = Integer.valueOf(dtm3.getValueAt(i,7).toString());    
        sistema = Integer.valueOf(dtm3.getValueAt(i,2).toString());        
        diferencia = sistema - corregido;
        
        if(diferencia <= 0)
        {
            kardex.setEntrada(Math.abs(diferencia));
            kardex.setSalida(0);
            
        renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb3.get(i).getCodigo()); 
        
        kardex.setAlmacenista(CConfiguracion.getFoto());
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setExistencias(renglon.getExistencias()-diferencia); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario");
        kardex.setMovimiento("Actualización de Inventario");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
        
        
        List<Articulos> articulo = harticulos.consultaArticulos("codigo", "=", listatb3.get(i).getCodigo());
        harticulos.actualizarExistencias(listatb3.get(i).getCodigo(), (int)articulo.get(0).getExistencia()-diferencia);
            
        }else
        {
                 //Si hay menos piezas en el almacén que en el sistema hay que ver que se hace...
                 //a dónde se le descuenta...y por eso es manual....
           renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb3.get(i).getCodigo()); 
           List<Articulos> articulo = harticulos.consultaArticulos("codigo", "=", listatb3.get(i).getCodigo());
            int valida1 = renglon.getExistencias()-diferencia;
            int valida2 = (int)articulo.get(0).getExistencia()-diferencia;
            
            System.out.println("valida 1 " + valida1 + " valida 2 "+valida2);
            
           if(valida1 >= 0 && valida2 >= 0)    
           {
            
        kardex.setEntrada(0);
        kardex.setSalida(Math.abs(diferencia));
            

        
        kardex.setAlmacenista(CConfiguracion.getFoto());
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setExistencias(renglon.getExistencias()-diferencia); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario");
        kardex.setMovimiento("Actualización de Inventario");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
        
        
       
        harticulos.actualizarExistencias(listatb3.get(i).getCodigo(), (int)articulo.get(0).getExistencia()-diferencia);   
           }else
           {
                System.out.println("valida 1 " + valida1 + " valida 2 "+valida2 + " "+ listatb3.get(i).getCodigo()); 
           }
            
        }
            

        }else
             {
                 i = listatb3.size();
             }
             
        }
        
        JOptionPane.showMessageDialog(null, "Kardex y Catálogos Actualizados");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        for(int a=0; a< listatb4.size(); a++)
        {
            if(!dtm4.getValueAt(a,7).toString().equals("-------------"))
            {
            try
            {
          Integer.valueOf(dtm4.getValueAt(a,7).toString());    
          Integer.valueOf(dtm4.getValueAt(a,2).toString());                        
            }catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Uno de los campos no es un número entero");
                return;
            }
            }
        }
        
        //tabla 3
        for(int i=0;i<listatb4.size();i++)
        {
             if(!dtm4.getValueAt(i,7).toString().equals("-------------"))
            {
        corregido = Integer.valueOf(dtm4.getValueAt(i,7).toString());    
        sistema = Integer.valueOf(dtm4.getValueAt(i,2).toString());        
        diferencia = sistema - corregido;
        
        if(diferencia <= 0)
        {
            kardex.setEntrada(Math.abs(diferencia));
            kardex.setSalida(0);
            
        renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb4.get(i).getCodigo()); 
        
        kardex.setAlmacenista(CConfiguracion.getFoto());
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setExistencias(renglon.getExistencias()-diferencia); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario");
        kardex.setMovimiento("Actualización de Inventario");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
        
        
        List<Articulos> articulo = harticulos.consultaArticulos("codigo", "=", listatb4.get(i).getCodigo());
        harticulos.actualizarExistencias(listatb4.get(i).getCodigo(), (int)articulo.get(0).getExistencia()-diferencia);
        }/* else
        {
                 //Si hay menos piezas en el almacén que en el sistema hay que ver que se hace...
                 //a dónde se le descuenta...y por eso es manual....
        } */

        }
        }
        
        JOptionPane.showMessageDialog(null, "Kardex y Catálogos Actualizados");
      
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        boolean bandera=false;
        
        for(int i=0; i<nuevosArticulos.size(); i++)
        {
            if(bandera)
            {
        Articulos articulo = new Articulos();
        articulo.setCodigo(nuevosArticulos.get(i).getCodigo());
        articulo.setDescripcion(nuevosArticulos.get(i).getDescripcion());
        articulo.setPrecioVenta(0.00);
        articulo.setPrecioCompra(0.00);
        articulo.setUltimoCosto(0.00);
        articulo.setClasificacion("1"); //
        articulo.setExistencia(Long.parseLong(dtm4.getValueAt(i,7).toString())); //esto está mal
        articulo.setReservado(0);
        articulo.setMinimoPzas(0);
        articulo.setMaximoPzas(0);
        articulo.setPromPzas(0);
        articulo.setIeps(0);
        articulo.setIva(16);
        articulo.setUnidad("PZA");       //
        articulo.setTipoEtiqueta("Mediana"); //
        articulo.setLineaPrincipal("Sin Línea");
        articulo.setAnticipos(0);
        articulo.setSinonimoPrincipal("Sin sinónimo");
        articulo.setNuevo(1);
        articulo.setParetto(0);
        articulo.setCodigo2("Sin código");
        articulo.setProveedor("Sin proveedor");
        articulo.setPrecioVenta2(0.0);
        articulo.setOferta(0);
        int id = harticulos.guardarArticulosCatalogo(articulo, null, null, null);
        
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(0);
                    kardex.setArticulo(nuevosArticulos.get(i).getCodigo());
                    kardex.setEntrada(Integer.parseInt(dtm4.getValueAt(i,7).toString()));
                    kardex.setExistencias(Integer.parseInt(dtm4.getValueAt(i,7).toString()));
                    kardex.setIdArticulo(id);
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(0.0);
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados(0);
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(0.0);
                    kardex.setVendidoEn(0.0);
                    
                    hkardex.guardarEnKardex(kardex); 
             }
            
                     if(!dtm4.getValueAt(i,7).toString().equals("-------------"))
            {
                bandera = true;
            }   
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        
        String fila = JOptionPane.showInputDialog(null,"Por favor ingresa el id de Fila que deseas actualizar:");
        boolean validador = Validadores.validarEntero("fila", fila);
        
        if(!validador)
        return;
        
        hUbicacion hubicacion = new hUbicacion();
        List <Ubicacion> filaValida = hubicacion.consultaUbicaciones("id", "=", fila);
        
        if(filaValida.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Esta fila no existe");
            return;
        }
        
        hArticuloUbicacion articuloubica = new hArticuloUbicacion();
       /* List<Articuloubicacion> articuloubicacion = articuloubica.consultaUbicacionArticulo(fila);
        
        if(articuloubicacion.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Esta fila no se encuentra relacionada a ningún artículo");
            return;
        } */
        
        String filaNoIdentificados = JOptionPane.showInputDialog(null,"Por favor ingresa el id de Fila de no identificados:");
        validador = Validadores.validarEntero("filaNoIdentificados", filaNoIdentificados);
        
        if(!validador)
        return;
        
        List <Ubicacion> filaValidaNoIdentificados = hubicacion.consultaUbicaciones("id", "=", filaNoIdentificados);
        
        if(filaValidaNoIdentificados.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Esta fila no existe");
            return;
        }        
        
        articuloubica.actualizarUbicacion("idubicacion", "=", fila, filaNoIdentificados);
        
        ManejoInventario manejoinventarios = new ManejoInventario();
        List<Inventario> capturados = manejoinventarios.leerArchivo(jTextField1.getText()); //capturados tiene todos los códigos capturados en el inventario fisico
        
        for(int i=0; i<capturados.size(); i++)
        {
            articuloubica.actualizarUbicacionPorCodigo(capturados.get(i).getCodigo(),fila);
        }
        
        JOptionPane.showMessageDialog(null, "Ubicaciones Actualizadas");
        jButton1.setEnabled(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton5.setEnabled(false);
        jButton6.setEnabled(false);
        jButton7.setEnabled(false);
        
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
     /*   for(int i=0;i<listatb3.size();i++)
        {
             if(!dtm3.getValueAt(i,7).toString().equals("-------------"))
            {    
        renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb3.get(i).getCodigo()); 
        
        kardex.setAlmacenista("JAVIERSANCHEZA");
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setEntrada(0);
        kardex.setExistencias(renglon.getExistencias()); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario Dic2013");
        kardex.setMovimiento("Actualización de Inventario Dic2013");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setSalida(0);
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
            }
        }
        
        
                
        JOptionPane.showMessageDialog(null, "Kardex y Catálogos Actualizados"); */
        
             // TODO add your handling code here:
        int iniciar = 0;
        for(int a=0; a< listatb3.size(); a++)
        {
            if(!dtm3.getValueAt(a,7).toString().equals("-------------"))
            {
            try
            {
          Integer.valueOf(dtm3.getValueAt(a,7).toString());    
          Integer.valueOf(dtm3.getValueAt(a,2).toString());                        
            }catch(Exception e)
            {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Uno de los campos no es un número entero");
                return;
            }
            }else
            {
            iniciar = a;    
            }
        }
        
        iniciar = iniciar+1;
        //tabla 3
        for(int i=iniciar;i<listatb3.size();i++)
        {
             if(!dtm3.getValueAt(i,7).toString().equals("-------------"))
            {     
        sistema = Integer.valueOf(dtm3.getValueAt(i,2).toString());        
        diferencia = sistema;
        
        if(diferencia > 0)
        {
                 //Si hay menos piezas en el almacén que en el sistema hay que ver que se hace...
                 //a dónde se le descuenta...y por eso es manual....
           renglon = hkardex.consultaUltimoRenglon("articulo", "=", listatb3.get(i).getCodigo()); 
           List<Articulos> articulo = harticulos.consultaArticulos("codigo", "=", listatb3.get(i).getCodigo());
            int valida1 = renglon.getExistencias()-diferencia;
            int valida2 = (int)articulo.get(0).getExistencia()-diferencia;
            
            System.out.println("valida 1 " + valida1 + " valida 2 "+valida2);
            
           if(valida1 >= 0 && valida2 >= 0)    
           {
            
        kardex.setEntrada(0);
        kardex.setSalida(Math.abs(diferencia));
            

        
        kardex.setAlmacenista(CConfiguracion.getFoto());
        kardex.setAnticipos(renglon.getAnticipos());
        kardex.setArticulo(renglon.getArticulo());
        kardex.setExistencias(renglon.getExistencias()-diferencia); 
        kardex.setIdArticulo(renglon.getIdArticulo());
        kardex.setModificacion("Actualización de Inventario");
        kardex.setMovimiento("Actualización de Inventario");
        kardex.setNoMov(String.valueOf(Integer.valueOf(renglon.getNoMov())+1));
        kardex.setPrecioVenta(renglon.getPrecioVenta());
        kardex.setRefFerrari("Inventario");
        kardex.setReservados(renglon.getReservados());
        kardex.setResponsable("1");
        kardex.setResponsable2(CConfiguracion.getFoto());
        kardex.setUltimoCosto(renglon.getUltimoCosto());
        kardex.setVendidoEn(0);
        hkardex.guardarEnKardex(kardex);
        
        
       
        harticulos.actualizarExistencias(listatb3.get(i).getCodigo(), (int)articulo.get(0).getExistencia()-diferencia);   
           }else
           {
                System.out.println("valida 1 " + valida1 + " valida 2 "+valida2 + " "+ listatb3.get(i).getCodigo()); 
           }
            
        }
            

        }else
             {
                 i = listatb3.size();
             }
             
        }
        
        JOptionPane.showMessageDialog(null, "Kardex y Catálogos Actualizados");
        
        
        
        
    }//GEN-LAST:event_jButton10ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    DecimalFormat df;
    Vector vectort1,encabezadot1;
    Vector vectort2,encabezadot2;
    Vector vectort3,encabezadot3;
    Vector vectort4,encabezadot4;
    DefaultTableModel dtm1,dtm2,dtm3,dtm4;
    hArticulos harticulos;
    List<Inventario> invtb1,invtb2,invtb3,invtb4;
    List<Inventario> listatb2,listatb3,listatb4,nuevosArticulos;
    MyFileListener myfilelister;
    hKardex hkardex;
    Kardex kardex;
    Kardex renglon;
    int corregido = 0;
    int sistema = 0;
    int diferencia = 0;
    
    private void inicializar() {
    df = new DecimalFormat("0.00");    
    encabezadot1 = new Vector<String>();
    vectort1 = new Vector();
    encabezadot1.add("Código");
    encabezadot1.add("Descripción");
    encabezadot1.add("Último Costo");
    encabezadot1.add("Almacén G.");
    encabezadot1.add("Almacén D.");
    encabezadot1.add("Reservación");
    encabezadot1.add("Anticipos");
    encabezadot1.add("Total");
    encabezadot1.add("Fila");
    dtm1 = new DefaultTableModel(vectort1,encabezadot1) {
};
    jTable1.setModel(dtm1);
    
    hkardex = new hKardex();
    harticulos = new hArticulos();
    invtb1 = new ArrayList<Inventario>();
    invtb2 = new ArrayList<Inventario>();
    invtb3 = new ArrayList<Inventario>();
    invtb4 = new ArrayList<Inventario>();
    
    listatb2 = new ArrayList<Inventario>();
    listatb3 = new ArrayList<Inventario>();
    listatb4 = new ArrayList<Inventario>();
    nuevosArticulos = new ArrayList<Inventario>();
    
    kardex = new Kardex();
    renglon = new Kardex();
    
    invtb1 = harticulos.inicializaInventario();
    
    for(Object o : invtb1)
    {
        Inventario inv = (Inventario)o;
        Vector vec = new Vector();
        vec.add(inv.getCodigo());
        vec.add(inv.getDescripcion());
        vec.add(df.format(inv.getPrecioCompra()));
        vec.add(inv.getAlmacenG());
        vec.add(inv.getAlmacenD());
        vec.add(inv.getReservados());
        vec.add(inv.getAnticipos());
        vec.add(inv.getSistema());
        vec.add(inv.getFila());
        invtb2.add(inv);
        vectort1.add(vec);
    }
       dtm1.fireTableDataChanged();
       myfilelister = new MyFileListener(this);
       jButton1.addActionListener(myfilelister);
    
    encabezadot2 = new Vector<String>();
    vectort2 = new Vector();
    encabezadot2.add("Código");
    encabezadot2.add("Descripción");
    encabezadot2.add("Sistema");
    encabezadot2.add("Físico");
    encabezadot2.add("Diferencia");
    encabezadot2.add("Costo Unitario");
    encabezadot2.add("Costo Total");
    encabezadot2.add("Corrección");
    encabezadot2.add("Fila");
   dtm2 = new DefaultTableModel(vectort2,encabezadot2) {
};
    jTable2.setModel(dtm2);   
      
    encabezadot3 = new Vector<String>();
    vectort3 = new Vector();
    encabezadot3.add("Código");
    encabezadot3.add("Descripción");
    encabezadot3.add("Sistema");
    encabezadot3.add("Físico");
    encabezadot3.add("Diferencia");
    encabezadot3.add("Costo Unitario");
    encabezadot3.add("Costo Total");
    encabezadot3.add("Corrección");
    encabezadot3.add("Fila");
    dtm3 = new DefaultTableModel(vectort3,encabezadot3) {};
    jTable4.setModel(dtm3);  
    
    
    encabezadot4 = new Vector<String>();
    vectort4 = new Vector();
    encabezadot4.add("Código");
    encabezadot4.add("Descripción");
    encabezadot4.add("Sistema");
    encabezadot4.add("Físico");
    encabezadot4.add("Diferencia");
    encabezadot4.add("Costo Unitario");
    encabezadot4.add("Costo Total");
    encabezadot4.add("Corrección");
    encabezadot4.add("Fila");
    dtm4 = new DefaultTableModel(vectort4,encabezadot4) {
};
    jTable5.setModel(dtm4);  
       
    }
    


class MyFileListener implements ActionListener{
private JFileChooser chooser = new JFileChooser();
private JFrame frame;
public MyFileListener(JFrame frame){
this.frame = frame;
}

        private MyFileListener(VRealizar_Inventario aThis) {
        }


    @Override
public void actionPerformed(ActionEvent ae) {
String textButton = ae.getActionCommand();
String dialogTitle = "Abrir un fichero";

if (textButton.equals("Guardar"))
dialogTitle = "Guardar un fichero";

chooser.setDialogTitle(dialogTitle);
chooser.setMultiSelectionEnabled(false);
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

int sel = chooser.showOpenDialog(frame);
if (sel == JFileChooser.APPROVE_OPTION){
File selectedFile = chooser.getSelectedFile();

jTextField1.setText(selectedFile.getAbsolutePath());
}else{
return;
}
}
    }

}
