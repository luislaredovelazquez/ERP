/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.paedeias.vistas;

import com.paedeias.controladores.CConfiguracion;
import com.paedeias.controladores.CGlobalConfig;
import com.paedeias.controladores.impresiones.ImpresionCierre;
import com.paedeias.controladores.impresiones.PageableText;
import com.paedeias.helpers.*;
import com.paedeias.identidades.*;
import java.awt.print.PageFormat;
import java.awt.print.Paper;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;

/**
 *
 * @author ALL
 */
public class VCatalogoCierres extends javax.swing.JPanel {

    /**
     * Creates new form catalogoCierres
     */
    public VCatalogoCierres() {
        initComponents();
        inicializar();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel3 = new javax.swing.JLabel();
        dateChooserCombo2 = new datechooser.beans.DateChooserCombo();
        jButton1 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jButton4 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Menú", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 102)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Cierre de ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("De");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("a");

        jButton1.setBackground(new java.awt.Color(11, 70, 119));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Enviar");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(11, 70, 119));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Anexar");
        jButton4.setContentAreaFilled(false);
        jButton4.setEnabled(false);
        jButton4.setOpaque(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Anexar cierre de");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addComponent(dateChooserCombo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)
                    .addComponent(jLabel10))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(11, 70, 119));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Imprimir");
        jButton2.setContentAreaFilled(false);
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Partidas:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("0000");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Cantidad:");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("0000");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Total");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("0000.00");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
                             //------------- CAMBIO DE FORMATO -----------------
                    jButton4.setEnabled(true);                
                    partidas = 0;
                    cantidad = 0;
                    total = 0;
        
                     final String OLD_FORMAT = "dd/MM/yy";
                     final String NEW_FORMAT = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString = dateChooserCombo1.getText();
                     String newDateString;

                     SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
                     Date d = null;
                      try {
                     d = sdf.parse(oldDateString);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf.applyPattern(NEW_FORMAT);
                     newDateString = sdf.format(d);
                     
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     final String OLD_FORMAT2 = "dd/MM/yy";
                     final String NEW_FORMAT2 = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString2 = dateChooserCombo2.getText();
                     String newDateString2;

                     SimpleDateFormat sdf2 = new SimpleDateFormat(OLD_FORMAT2);
                     Date d2 = null;
                      try {
                     d2 = sdf2.parse(oldDateString2);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf2.applyPattern(NEW_FORMAT2);
                     newDateString2 = sdf.format(d2);
                     
                     
                     ventas.clear();
                     anticipos.clear();
                     vector.clear();
                     compras.clear();
                     facturas.clear();
                     cierre.clear();
                     
                     String nombre = "No encontrado";
                     String nombreU= "No encontrado";
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     if(jComboBox1.getSelectedIndex() == 0)
                     { 
                         hVentas hv = new hVentas();
                         ventas = hv.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: ventas){
 
                         Ventas iarticulos = (Ventas)o;
                         
                         for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Ticket");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                         
                        }

            dtm = new DefaultTableModel(vector,encabezadoCierre) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };

           jTable1.setModel(dtm);

                         
                         // List<Ventas> ventas = hv.c
                     }
                      else if(jComboBox1.getSelectedIndex() == 1)
                      { 
                          // System.out.println("Algo");
                         hFacturas hv = new hFacturas();
                         hFacturasCFDI hvcfdi = new hFacturasCFDI();
                         facturas2 = hv.consultaFacturasPeriodo(newDateString, newDateString2);
                         facturas = hvcfdi.consultaFacturasPeriodo(newDateString, newDateString2);
                         
                         if(facturas == null)
                         facturas = new ArrayList<Factura>();   
                         
                         if(facturas2 == null)
                         facturas2 = new ArrayList<Factura>();                             
                         
                                                  
                         for(int i=0; i<facturas2.size(); i++)
                         {
                         facturas.add(facturas2.get(i));    
                         }
                         
                         for(Object o: facturas){
                         
                                                      
                         Factura iarticulos = (Factura)o;    
                             
                           for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdReceptorF(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdEmisorF(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }    
                             

                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getIdFactura());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFecha().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos()); //Deberia de ser el número de partidas
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getMovimiento());
                    
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFecha().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getIdFactura()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas-Factura");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getCantidadArticulos();
                         total = total + Double.valueOf(iarticulos.getTotal());
                         partidas = partidas + 1;
                        }

                         dtm = new DefaultTableModel(vector,encabezadoCierre) {

                         @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }
                        };

                       jTable1.setModel(dtm);

                      }
                     else if(jComboBox1.getSelectedIndex() == 2)
                     {
                         hVentas hv = new hVentas();
                         ventas = hv.consultaVentasPeriodoReservacion(newDateString, newDateString2);
                         
                         for(Object o: ventas){
                         Ventas iarticulos = (Ventas)o;
                         
                        for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add("Reservación");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Reservaciones");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }

                         dtm = new DefaultTableModel(vector,encabezadoCierre) {

                         @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }
                        };

                       jTable1.setModel(dtm);
                     
                     }
                     else if(jComboBox1.getSelectedIndex() == 3)
                     {   
                         hVentaAnticipos hv = new hVentaAnticipos();
                         anticipos = hv.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: anticipos){
                         Ventaanticipos iarticulos = (Ventaanticipos)o;
                         
                         
                             for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Anticipos");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }

                         dtm = new DefaultTableModel(vector,encabezadoCierre) {

                         @Override
                        public boolean isCellEditable(int row, int column) {
                        return false;
                        }
                        };

                       jTable1.setModel(dtm);
                     }
                     else if(jComboBox1.getSelectedIndex() == 4)
                     { 
                         
                         
                         hComprasMayoreo hv = new hComprasMayoreo();
                         compras = hv.consultaComprasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: compras){
                         ComprasMayoreo iarticulos = (ComprasMayoreo)o;
                         
                            for(int i=0; i<proveedores.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getCodigoProveedor(),proveedores.get(i).getId())==0)
                             {
                                 nombre = proveedores.get(i).getNombre();
                                 i = proveedores.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {   // System.out.println("Usuario "+iarticulos.getIdUsuario());
                             // System.out.println("Cat "+usuarios.get(i).getId());
                             
                             if(Long.compare(Long.valueOf(iarticulos.getIdUsuario()),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaCompra().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos());
                         unaFila.add(iarticulos.getImporte());
                         unaFila.add("Pedido");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(iarticulos.getFechaCompra().substring(0, 19));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getImporte()));
                         acierre.setTipoCierre("Compras");
                         acierre.setTipoCliente("Proveedor");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + Integer.valueOf(iarticulos.getCantidadArticulos());
                         total = total + iarticulos.getImporte();
                         partidas = partidas + 1;
                        }

            dtm = new DefaultTableModel(vector,encabezadoCierre) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };

           jTable1.setModel(dtm);
                     }else if(jComboBox1.getSelectedIndex() == 5)
             {

                        vector.clear();
                 //
                         Vector<Object> en1 = new Vector<Object>();
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         en1.add("VENTAS TICKET");
                         vector.add(en1);
                 //
                 
                         hVentas hv = new hVentas();
                         ventas = hv.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: ventas){
 
                         Ventas iarticulos = (Ventas)o;
                         
                         for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Ticket");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                         }
                 //
                 
                         Vector<Object> en2 = new Vector<Object>();
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         en2.add("FACTURAS");
                         vector.add(en2);
                         
                         hFacturas hv2 = new hFacturas();
                         hFacturasCFDI hvcfdi = new hFacturasCFDI();
                         facturas2 = hv2.consultaFacturasPeriodo(newDateString, newDateString2);
                         facturas = hvcfdi.consultaFacturasPeriodo(newDateString, newDateString2);
                         
                         if(facturas == null)
                         facturas = new ArrayList<Factura>();   
                         
                         if(facturas2 == null)
                         facturas2 = new ArrayList<Factura>();                             
                         
                                                  
                         for(int i=0; i<facturas2.size(); i++)
                         {
                         facturas.add(facturas2.get(i));    
                         }
                         
                         for(Object o: facturas){
                         
                                                      
                         Factura iarticulos = (Factura)o;    
                             
                           for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdReceptorF(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdEmisorF(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }    
                             

                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getIdFactura());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFecha().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos()); //Deberia de ser el número de partidas
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getMovimiento());
                    
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFecha().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getIdFactura()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas-Factura");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getCantidadArticulos();
                         total = total + Double.valueOf(iarticulos.getTotal());
                         partidas = partidas + 1;
                        } 
                         
                 //
                 
                         Vector<Object> en3 = new Vector<Object>();
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         en3.add("V. RESERVACIONES");
                         vector.add(en3);
                         
                         hVentas hv3 = new hVentas();
                         ventas = hv3.consultaVentasPeriodoReservacion(newDateString, newDateString2);
                         
                         for(Object o: ventas){
                         Ventas iarticulos = (Ventas)o;
                         
                        for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add("Reservación");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Reservaciones");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }      
                                                  
                 //      
                  
                         Vector<Object> en4 = new Vector<Object>();
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         en4.add("V. ANTICIPOS");
                         vector.add(en4);
                         
                         hVentaAnticipos hvan = new hVentaAnticipos();
                         anticipos = hvan.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: anticipos){
                         Ventaanticipos iarticulos = (Ventaanticipos)o;
                         
                         
                             for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Anticipos");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }      
                         
                 //     
                         
                         Vector<Object> en5 = new Vector<Object>();
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         en5.add("COMPRAS");
                         vector.add(en5);
                  
                         hComprasMayoreo hvcm = new hComprasMayoreo();
                         compras = hvcm.consultaComprasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: compras){
                         ComprasMayoreo iarticulos = (ComprasMayoreo)o;
                         
                            for(int i=0; i<proveedores.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getCodigoProveedor(),proveedores.get(i).getId())==0)
                             {
                                 nombre = proveedores.get(i).getNombre();
                                 i = proveedores.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {   // System.out.println("Usuario "+iarticulos.getIdUsuario());
                             // System.out.println("Cat "+usuarios.get(i).getId());
                             
                             if(Long.compare(Long.valueOf(iarticulos.getIdUsuario()),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaCompra().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos());
                         unaFila.add(iarticulos.getImporte());
                         unaFila.add("Pedido");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(iarticulos.getFechaCompra().substring(0, 19));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getImporte()));
                         acierre.setTipoCierre("Compras");
                         acierre.setTipoCliente("Proveedor");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + Integer.valueOf(iarticulos.getCantidadArticulos());
                         total = total + iarticulos.getImporte();
                         partidas = partidas + 1;
                        }
                         
                 //      
            dtm = new DefaultTableModel(vector,encabezadoCierre) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };

           jTable1.setModel(dtm);    
                 //
                 partidas = 0;
                 cantidad = 0;
                 total = 0;
             }
                     
            jLabel5.setText(String.valueOf(partidas));         
            jLabel7.setText(String.valueOf(cantidad));         
            jLabel9.setText(df.format(total));         
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
             ImpresionCierre impresioncierre = new ImpresionCierre();  
             impresioncierre.inicializar(cierre);
             PrinterJob job = PrinterJob.getPrinterJob();
             // job.setPrintable(impresioncierre); 
            // PageFormat format = job.pageDialog(job.defaultPage());
        PageFormat format = new PageFormat();
        
        
        Paper p = new Paper();
        
        p.setSize(CGlobalConfig.getAnchoImp(),CGlobalConfig.getAltoImp());
        p.setImageableArea(CGlobalConfig.getxImp(),CGlobalConfig.getyImp(),CGlobalConfig.getAnchoImp(),CGlobalConfig.getAltoImp());
        format.setPaper(p);
            job.setPageable(new PageableText(impresioncierre.generarCadenaImpresion(), format));
              if (job.printDialog())
                {
                try {
                    job.print();
                } catch (PrinterException ex) {
                    Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
        } catch (IOException ex) {
            Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
                     final String OLD_FORMAT = "dd/MM/yy";
                     final String NEW_FORMAT = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString = dateChooserCombo1.getText();
                     String newDateString;

                     SimpleDateFormat sdf = new SimpleDateFormat(OLD_FORMAT);
                     Date d = null;
                      try {
                     d = sdf.parse(oldDateString);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf.applyPattern(NEW_FORMAT);
                     newDateString = sdf.format(d);
                     
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     
                     final String OLD_FORMAT2 = "dd/MM/yy";
                     final String NEW_FORMAT2 = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString2 = dateChooserCombo2.getText();
                     String newDateString2;

                     SimpleDateFormat sdf2 = new SimpleDateFormat(OLD_FORMAT2);
                     Date d2 = null;
                      try {
                     d2 = sdf2.parse(oldDateString2);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf2.applyPattern(NEW_FORMAT2);
                     newDateString2 = sdf.format(d2);
                     
                     
                     ventas.clear();
                     anticipos.clear();
                     compras.clear();
                     facturas.clear();
                     cierre.clear();
                     
                     String nombre = "No encontrado";
                     String nombreU= "No encontrado";
                     
                     //------------- CAMBIO DE FORMATO -----------------
                     if(jComboBox2.getSelectedIndex() == 0)
                     { 
                         hVentas hv = new hVentas();
                         ventas = hv.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: ventas){
 
                         Ventas iarticulos = (Ventas)o;
                         
                         for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Ticket");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                         
                        }

           dtm.fireTableDataChanged();


                         
                         // List<Ventas> ventas = hv.c
                     }
                      else if(jComboBox2.getSelectedIndex() == 1)
                      { 
                          // System.out.println("Algo");
                         hFacturas hv = new hFacturas();
                         hFacturasCFDI hvcfdi = new hFacturasCFDI();
                         facturas2 = hv.consultaFacturasPeriodo(newDateString, newDateString2);
                         facturas = hvcfdi.consultaFacturasPeriodo(newDateString, newDateString2);
                         
                         if(facturas == null)
                         facturas = new ArrayList<Factura>();   
                         
                         if(facturas2 == null)
                         facturas2 = new ArrayList<Factura>();                             
                         
                                                  
                         for(int i=0; i<facturas2.size(); i++)
                         {
                         facturas.add(facturas2.get(i));    
                         }
                         
                         for(Object o: facturas){
                         
                                                      
                         Factura iarticulos = (Factura)o;    
                             
                           for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdReceptorF(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdEmisorF(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }    
                             

                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getIdFactura());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFecha().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos()); //Deberia de ser el número de partidas
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getMovimiento());
                    
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFecha().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getIdFactura()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas-Factura");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getCantidadArticulos();
                         total = total + Double.valueOf(iarticulos.getTotal());
                         partidas = partidas + 1;
                        }

                       dtm.fireTableDataChanged();


                      }
                     else if(jComboBox2.getSelectedIndex() == 2)
                     {
                         hVentas hv = new hVentas();
                         ventas = hv.consultaVentasPeriodoReservacion(newDateString, newDateString2);
                         
                         for(Object o: ventas){
                         Ventas iarticulos = (Ventas)o;
                         
                        for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add("Reservación");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Reservaciones");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }

                     dtm.fireTableDataChanged();
                     
                     }
                     else if(jComboBox2.getSelectedIndex() == 3)
                     {   
                         hVentaAnticipos hv = new hVentaAnticipos();
                         anticipos = hv.consultaVentasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: anticipos){
                         Ventaanticipos iarticulos = (Ventaanticipos)o;
                         
                         
                             for(int i=0; i<clientes.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdcliente(),clientes.get(i).getId())==0)
                             {
                                 nombre = clientes.get(i).getNombre();
                                 i = clientes.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getIdusuario(),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaVenta().substring(0, 19));
                         unaFila.add(iarticulos.getArticulos());
                         unaFila.add(iarticulos.getTotal());
                         unaFila.add(iarticulos.getTipoDeVenta());
                         
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getArticulos()));
                         acierre.setFechaVenta(String.valueOf(iarticulos.getFechaVenta().substring(0, 19)));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getTotal()));
                         acierre.setTipoCierre("Ventas Anticipos");
                         acierre.setTipoCliente("Cliente");
                         cierre.add(acierre);
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + iarticulos.getArticulos();
                         total = total + iarticulos.getTotal();
                         partidas = partidas + 1;
                        }

                     dtm.fireTableDataChanged();
                     }
                     else if(jComboBox2.getSelectedIndex() == 4)
                     { 
                         
                         
                         hComprasMayoreo hv = new hComprasMayoreo();
                         compras = hv.consultaComprasPeriodo(newDateString, newDateString2);
                         
                         for(Object o: compras){
                         ComprasMayoreo iarticulos = (ComprasMayoreo)o;
                         
                            for(int i=0; i<proveedores.size(); i++)    
                         {
                             if(Long.compare(iarticulos.getCodigoProveedor(),proveedores.get(i).getId())==0)
                             {
                                 nombre = proveedores.get(i).getNombre();
                                 i = proveedores.size();
                             }
                         }
                         
                          for(int i=0; i<usuarios.size(); i++)    
                         {   // System.out.println("Usuario "+iarticulos.getIdUsuario());
                             // System.out.println("Cat "+usuarios.get(i).getId());
                             
                             if(Long.compare(Long.valueOf(iarticulos.getIdUsuario()),usuarios.get(i).getId())==0)
                             {
                                 nombreU = usuarios.get(i).getFoto();
                                 i = usuarios.size();
                             }
                         }  
                         
                         
                         Vector<Object> unaFila = new Vector<Object>();
                         unaFila.add(iarticulos.getId());
                         unaFila.add(nombre);
                         unaFila.add(nombreU);
                         unaFila.add(iarticulos.getFechaCompra().substring(0, 19));
                         unaFila.add(iarticulos.getCantidadArticulos());
                         unaFila.add(iarticulos.getImporte());
                         unaFila.add("Pedido");
                         
                         Cierre acierre = new Cierre();
                         acierre.setArticulos(String.valueOf(iarticulos.getCantidadArticulos()));
                         acierre.setFechaVenta(iarticulos.getFechaCompra().substring(0, 19));
                         acierre.setId(String.valueOf(iarticulos.getId()));
                         acierre.setIdCliente(nombre);
                         acierre.setIdUsuario(nombreU);
                         acierre.setTotal(String.valueOf(iarticulos.getImporte()));
                         acierre.setTipoCierre("Compras");
                         acierre.setTipoCliente("Proveedor");
                         cierre.add(acierre);
                         
                         
                         vector.add(unaFila); 
                         
                         cantidad = cantidad + Integer.valueOf(iarticulos.getCantidadArticulos());
                         total = total + iarticulos.getImporte();
                         partidas = partidas + 1;
                        }

                        dtm.fireTableDataChanged();
                     }
                     
            jLabel5.setText(String.valueOf(partidas));         
            jLabel7.setText(String.valueOf(cantidad));         
            jLabel9.setText(df.format(total));    
    }//GEN-LAST:event_jButton4ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private datechooser.beans.DateChooserCombo dateChooserCombo2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel dtm;
    Vector vector;
    Vector<String> encabezadoCierre;
    List<Ventas> ventas;
    List<Ventaanticipos> anticipos;
    List<ComprasMayoreo> compras;
    List<Factura> facturas;
    List<Factura> facturas2;
    List<Cierre> cierre;
    List<Proveedores> proveedores;
    List<Clientes> clientes;
    List<Usuarios> usuarios;
    int cantidad=0;
    int partidas = 0;
    double total = 0;
    DecimalFormat df;
    
    
    private void inicializar() {
      df = new DecimalFormat("0.00");
      vector = new Vector();
      encabezadoCierre = new Vector<String>();
      
      encabezadoCierre = new Vector<String>();
      encabezadoCierre.add("Id");
      encabezadoCierre.add("Cliente/Proveedor");
      encabezadoCierre.add("Usuario");
      encabezadoCierre.add("Fecha");
      encabezadoCierre.add("Articulos");
      encabezadoCierre.add("Total");
      encabezadoCierre.add("Venta");
      
      dtm = new DefaultTableModel(vector,encabezadoCierre);
      
      jComboBox1.addItem("Ventas Ticket");
      jComboBox1.addItem("Ventas-Factura");
      jComboBox1.addItem("Ventas Reservaciones");
      jComboBox1.addItem("Ventas Anticipos");
      jComboBox1.addItem("Compras");
      jComboBox1.addItem("Todos");
      
      jComboBox2.addItem("Ventas Ticket");
      jComboBox2.addItem("Ventas-Factura");
      jComboBox2.addItem("Ventas Reservaciones");
      jComboBox2.addItem("Ventas Anticipos");
      jComboBox2.addItem("Compras");
      
      ventas = new ArrayList<Ventas>();
      anticipos = new ArrayList<Ventaanticipos>();
      compras = new ArrayList<ComprasMayoreo>();
      facturas = new ArrayList<Factura>();
      facturas2 = new ArrayList<Factura>();
      cierre = new ArrayList<Cierre>();
      
      jTable1.setModel(dtm);
      
      hProveedores hp = new hProveedores();
      hClientes hc = new hClientes();
      hUsuarios hu = new hUsuarios();
      
      proveedores = hp.consultaProveedores("", "*", "");
      clientes = hc.consultaClientes("", "*", "");
      usuarios = hu.consultaUsuarios("", "*", "");
      
      jButton1.setEnabled(CConfiguracion.isBuscarCierre());
      jButton2.setEnabled(CConfiguracion.isImprimir());
      
    }
}
