/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.paedeias.vistas;


import com.paedeias.helpers.*;
import com.paedeias.identidades.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.List;
import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALL
 */
public class VRealizar_Respaldo extends javax.swing.JPanel {

    /**
     * Creates new form VRealizar_Respaldo
     */
    public VRealizar_Respaldo() {
        initComponents();
        inicializar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(11, 70, 119));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Respaldar");
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Seleccionar Todas");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });

        jCheckBox2.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox2.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox2.setText("Borrar Selección");
        jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCheckBox2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox1))
                    .addComponent(jButton1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2)))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tablas"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 797, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        
             if(evt.getClickCount() == 2)
        {
            if(Boolean.valueOf(dtm.getValueAt(jTable1.getSelectedRow(), 1).toString()))
            {
                dtm.setValueAt(false, jTable1.getSelectedRow(), 1);
            }else
            {
                dtm.setValueAt(true, jTable1.getSelectedRow(), 1);
            }
        }
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        // TODO add your handling code here:
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
          dtm.setValueAt(true,i, 1);  
        }
        dtm.fireTableDataChanged();
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        // TODO add your handling code here:
        
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
          dtm.setValueAt(false,i, 1);  
        }
        dtm.fireTableDataChanged(); 
        
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        FileWriter fichero = null;
        PrintWriter pw = null;
        String respaldo="";
        BufferedWriter bw;
        
        //AlmacenDevoluciones
        
        if(Boolean.valueOf(jTable1.getValueAt(0, 1).toString()) == true)
        {
        hAlmacendevoluciones h1 = new hAlmacendevoluciones();    
        List<Almacendevoluciones> l1 = h1.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/almacendevoluciones.txt");
 
            for (int i = 0; i < l1.size(); i++)
            {
                respaldo = respaldo + "*#*" + l1.get(i).getId();
                respaldo = respaldo + "*#*" + l1.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l1.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l1.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l1.get(i).getDescripcionArticulo();
                respaldo = respaldo + "*#*" + l1.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l1.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l1.get(i).getTipoBeneficio();
                respaldo = respaldo + "*#*" + l1.get(i).getBeneficio();
                respaldo = respaldo + "*#*" + l1.get(i).getConBeneficio();
                respaldo = respaldo + "*#*" + l1.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l1.get(i).getSubtotal();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }

        if(Boolean.valueOf(jTable1.getValueAt(1, 1).toString()) == true)
        {
        //Anticipos
        hAnticipos h2 = new hAnticipos();
        List<Anticipos> l2 = h2.consultaAnticipos("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/anticipos.txt");
 
            for (int i = 0; i < l2.size(); i++)
            {
                respaldo = respaldo + "*#*" + l2.get(i).getId();
                respaldo = respaldo + "*#*" + l2.get(i).getReferencia();
                respaldo = respaldo + "*#*" + l2.get(i).getFecha();
                respaldo = respaldo + "*#*" + l2.get(i).getIdVendedor();
                respaldo = respaldo + "*#*" + l2.get(i).getFechaFin();
                respaldo = respaldo + "*#*" + l2.get(i).getAcuenta();
                respaldo = respaldo + "*#*" + l2.get(i).getImporte();
                respaldo = respaldo + "*#*" + l2.get(i).getResta();
                respaldo = respaldo + "*#*" + l2.get(i).getTipo();
                respaldo = respaldo + "*#*" + l2.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l2.get(i).getDevuelta();
                respaldo = respaldo + "*#*" + l2.get(i).getCancelado();
                respaldo = respaldo + "*#*" + l2.get(i).getTicket();
                respaldo = respaldo + "*#*" + l2.get(i).getFactura();
                respaldo = respaldo + "*#*" + l2.get(i).getSurtido();
                respaldo = respaldo + "*#*" + l2.get(i).getPropietario();
                respaldo = respaldo + "*#*" + l2.get(i).getTelefono();
                respaldo = respaldo + "*#*" + l2.get(i).getAnio();
                respaldo = respaldo + "*#*" + l2.get(i).getPuertas();
                respaldo = respaldo + "*#*" + l2.get(i).getNoserie();
                respaldo = respaldo + "*#*" + l2.get(i).getModelo();
                respaldo = respaldo + "*#*" + l2.get(i).getLado();
                respaldo = respaldo + "*#*" + l2.get(i).getTransmision();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
        if(Boolean.valueOf(jTable1.getValueAt(2, 1).toString()) == true)
        {
        
         //ArticuloLinea
        hArticulolinea h5 = new hArticulolinea();
        List<Articulolinea> l5 = h5.consultaArticuloLinea();
        try
        {
            fichero = new FileWriter("respaldo/articulolinea.txt");
 
            for (int i = 0; i < l5.size(); i++)
            {
                respaldo = respaldo + "*#*" + l5.get(i).getId();
                respaldo = respaldo + "*#*" + l5.get(i).getClaveArticulo();
                respaldo = respaldo + "*#*" + l5.get(i).getClaveLinea();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
               //ArticuloProveedor
       if(Boolean.valueOf(jTable1.getValueAt(3, 1).toString()) == true)
       {
       hArticuloProveedor h3 = new hArticuloProveedor(); 
       List<Articuloproveedor> l3 = h3.consultaArtProv("", "*", ""); 
        try
        {
            fichero = new FileWriter("respaldo/articuloproveedor.txt");
 
            for (int i = 0; i < l3.size(); i++)
            {
                respaldo = respaldo + "*#*" + l3.get(i).getId();
                respaldo = respaldo + "*#*" + l3.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l3.get(i).getIdProveedor();
                respaldo = respaldo + "*#*" + l3.get(i).getSinonimo();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
       }
        
        //ArticuloUbicación
        if(Boolean.valueOf(jTable1.getValueAt(4, 1).toString()) == true)
        {
        hArticuloUbicacion h4 = new hArticuloUbicacion();
        List<Articuloubicacion> l4 = h4.consultaArticuloUbicacion();
        try
        {
            fichero = new FileWriter("respaldo/articuloubicacion.txt");
 
            for (int i = 0; i < l4.size(); i++)
            {
                respaldo = respaldo + "*#*" + l4.get(i).getId();
                respaldo = respaldo + "*#*" + l4.get(i).getIdarticulo();
                respaldo = respaldo + "*#*" + l4.get(i).getUbicacion();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
          //ArticulosEnMostrador
        if(Boolean.valueOf(jTable1.getValueAt(5, 1).toString()) == true)
        {
        hArticulosEnMostrador h7 = new hArticulosEnMostrador();
        List<ArticulosEnMostrador> l7 = h7.consultaArticulosEnMostrador2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/articulosenmostrador.txt");
 
            for (int i = 0; i < l7.size(); i++)
            {
                respaldo = respaldo + "*#*" + l7.get(i).getId();
                respaldo = respaldo + "*#*" + l7.get(i).getCodigo();
                respaldo = respaldo + "*#*" + l7.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l7.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l7.get(i).getResponsable();
                respaldo = respaldo + "*#*" + l7.get(i).getFecha();
               
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
          //Blog
       if(Boolean.valueOf(jTable1.getValueAt(6, 1).toString()) == true)
        {
        hBlog h8 = new hBlog();
        List<Blog> l8 = h8.consultaBlog2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/blog.txt");
 
            for (int i = 0; i < l8.size(); i++)
            {
                respaldo = respaldo + "*#*" + l8.get(i).getId();
                respaldo = respaldo + "*#*" + l8.get(i).getTitulo();
                respaldo = respaldo + "*#*" + l8.get(i).getTexto();
                respaldo = respaldo + "*#*" + l8.get(i).getAutor();
                
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
          //Clientes
       
        if(Boolean.valueOf(jTable1.getValueAt(7, 1).toString()) == true)
        {
        hClientes h9 = new hClientes();
        List<Clientes> l9 = h9.consultaClientes("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/clientes.txt");
 
            for (int i = 0; i < l9.size(); i++)
            {
                respaldo = respaldo + "*#*" + l9.get(i).getId();
                respaldo = respaldo + "*#*" + l9.get(i).getCodigo();
                respaldo = respaldo + "*#*" + l9.get(i).getSucursal();
                respaldo = respaldo + "*#*" + l9.get(i).getNombre();
                respaldo = respaldo + "*#*" + l9.get(i).getClasificacion();
                respaldo = respaldo + "*#*" + l9.get(i).getTelefono();
                respaldo = respaldo + "*#*" + l9.get(i).getAtencion();
                respaldo = respaldo + "*#*" + l9.get(i).getCalle();
                respaldo = respaldo + "*#*" + l9.get(i).getNumeroExterior();
                respaldo = respaldo + "*#*" + l9.get(i).getNumeroInterior();
                respaldo = respaldo + "*#*" + l9.get(i).getColonia();
                respaldo = respaldo + "*#*" + l9.get(i).getPoblacion();
                respaldo = respaldo + "*#*" + l9.get(i).getEstado();
                respaldo = respaldo + "*#*" + l9.get(i).getCodigoPostal();
                respaldo = respaldo + "*#*" + l9.get(i).getEmail();
                respaldo = respaldo + "*#*" + l9.get(i).getUtilGlob();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc5();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc1();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc2();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc3();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc4();
                respaldo = respaldo + "*#*" + l9.get(i).getDescVol();
                respaldo = respaldo + "*#*" + l9.get(i).getDescGlobal();
                respaldo = respaldo + "*#*" + l9.get(i).getBloqueo();
                respaldo = respaldo + "*#*" + l9.get(i).getOfertas();
                respaldo = respaldo + "*#*" + l9.get(i).getDiasCredito();
                respaldo = respaldo + "*#*" + l9.get(i).getLimiteDiasCredito();
                respaldo = respaldo + "*#*" + l9.get(i).getCredito();
                respaldo = respaldo + "*#*" + l9.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l9.get(i).getUtilVol();
                respaldo = respaldo + "*#*" + l9.get(i).getFechaNacimiento();
                respaldo = respaldo + "*#*" + l9.get(i).getSaldo();
                respaldo = respaldo + "*#*" + l9.get(i).getPais();
                respaldo = respaldo + "*#*" + l9.get(i).getRfc();
                respaldo = respaldo + "*#*" + l9.get(i).getDesc6();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil1();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil2();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil3();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil4();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil5();
                respaldo = respaldo + "*#*" + l9.get(i).getUtil6();
                respaldo = respaldo + "*#*" + l9.get(i).getTransferencia();
                respaldo = respaldo + "*#*" + l9.get(i).getBanco();
                respaldo = respaldo + "*#*" + l9.get(i).getCheckCredito();
                respaldo = respaldo + "\n";
            }   
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        

        
        if(Boolean.valueOf(jTable1.getValueAt(8, 1).toString()) == true)
        {
        hArticulos h6 = new hArticulos();
        List<Articulos> l6 = h6.consultaArticulos("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/articulos.txt");
            respaldo = "";
 
            for (int i = 0; i < l6.size(); i++)
            {
                respaldo = respaldo + "*#*" + l6.get(i).getId();
                respaldo = respaldo + "*#*" + l6.get(i).getCodigo();
                respaldo = respaldo + "*#*" + l6.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l6.get(i).getClasificacion();
                respaldo = respaldo + "*#*" + l6.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l6.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l6.get(i).getUltimoCosto();
                respaldo = respaldo + "*#*" + l6.get(i).getUnidad();
                respaldo = respaldo + "*#*" + l6.get(i).getExistencia();
                respaldo = respaldo + "*#*" + l6.get(i).getReservado();
                respaldo = respaldo + "*#*" + l6.get(i).getMinimoPzas();
                respaldo = respaldo + "*#*" + l6.get(i).getMaximoPzas();
                respaldo = respaldo + "*#*" + l6.get(i).getPromPzas();
                respaldo = respaldo + "*#*" + l6.get(i).getIva();
                respaldo = respaldo + "*#*" + l6.get(i).getIeps();
                respaldo = respaldo + "*#*" + l6.get(i).getTipoEtiqueta();
                respaldo = respaldo + "*#*" + l6.get(i).getBloqueado();
                respaldo = respaldo + "*#*" + l6.get(i).getAlmacenDevoluciones();
                respaldo = respaldo + "*#*" + l6.get(i).getLineaPrincipal();
                respaldo = respaldo + "*#*" + l6.get(i).getAnticipos();
                respaldo = respaldo + "*#*" + l6.get(i).getSinonimoPrincipal();
                respaldo = respaldo + "*#*" + l6.get(i).getCodigo2();
                respaldo = respaldo + "*#*" + l6.get(i).getPrecioVenta2();
                respaldo = respaldo + "*#*" + l6.get(i).getProveedor();
                respaldo = respaldo + "*#*" + l6.get(i).getParetto();
                respaldo = respaldo + "*#*" + l6.get(i).getNuevo();
                respaldo = respaldo + "*#*" + l6.get(i).getOferta();
                respaldo = respaldo + "\n";
            }
            
                        bw = new BufferedWriter(fichero);
			bw.write(respaldo);
			bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
        }
        
        //ComprasMayoreo
       if(Boolean.valueOf(jTable1.getValueAt(9, 1).toString()) == true)
        {
        hComprasMayoreo h11 = new hComprasMayoreo();
        List<ComprasMayoreo> l11 = h11.consultaCompras2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/comprasmayoreo.txt");
 
            for (int i = 0; i < l11.size(); i++)
            {
                respaldo = respaldo + "*#*" + l11.get(i).getId();
                respaldo = respaldo + "*#*" + l11.get(i).getCodigoPedido();
                respaldo = respaldo + "*#*" + l11.get(i).getCodigoProveedor();
                respaldo = respaldo + "*#*" + l11.get(i).getImporte();
                respaldo = respaldo + "*#*" + l11.get(i).getCargos();
                respaldo = respaldo + "*#*" + l11.get(i).getDescAdic();
                respaldo = respaldo + "*#*" + l11.get(i).getCompra();
                respaldo = respaldo + "*#*" + l11.get(i).getDevolucion();
                respaldo = respaldo + "*#*" + l11.get(i).getPedido();
                respaldo = respaldo + "*#*" + l11.get(i).getNumRefComp();
                respaldo = respaldo + "*#*" + l11.get(i).getObservacion();
                respaldo = respaldo + "*#*" + l11.get(i).getTipoPago();
                respaldo = respaldo + "*#*" + l11.get(i).getCheque();
                respaldo = respaldo + "*#*" + l11.get(i).getBanco();
                respaldo = respaldo + "*#*" + l11.get(i).getDiasCred();
                respaldo = respaldo + "*#*" + l11.get(i).getFechaCompra();
                respaldo = respaldo + "*#*" + l11.get(i).getFactura();
                respaldo = respaldo + "*#*" + l11.get(i).getIdUsuario();
                respaldo = respaldo + "*#*" + l11.get(i).getCantidadArticulos();
                respaldo = respaldo + "*#*" + l11.get(i).getTn();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
          //CuentasPorCobrar
        if(Boolean.valueOf(jTable1.getValueAt(10, 1).toString()) == true)
        {
        hCuentasPorCobrar h13 = new hCuentasPorCobrar();
        List<Cuentasporcobrar> l13 = h13.consultaCtaPorCobrar2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/cuentasporcobrar.txt");
 
            for (int i = 0; i < l13.size(); i++)
            {
                respaldo = respaldo + "*#*" + l13.get(i).getId();
                respaldo = respaldo + "*#*" + l13.get(i).getVenta();
                respaldo = respaldo + "*#*" + l13.get(i).getFechaVencimiento();
                respaldo = respaldo + "*#*" + l13.get(i).getPagado();
                respaldo = respaldo + "*#*" + l13.get(i).getObservacion();
                respaldo = respaldo + "*#*" + l13.get(i).getSaldo();
                respaldo = respaldo + "*#*" + l13.get(i).getTipo();
                respaldo = respaldo + "*#*" + l13.get(i).getCliente();
                respaldo = respaldo + "*#*" + l13.get(i).getFactura();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
           //CuentasPorPagar
        if(Boolean.valueOf(jTable1.getValueAt(11, 1).toString()) == true)
        {
        hCuentasPorPagar h14 = new hCuentasPorPagar();
        List<Cuentasporpagar> l14 = h14.consultaCuentasPorPagar2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/cuentasporpagar.txt");
 
            for (int i = 0; i < l14.size(); i++)
            {
                respaldo = respaldo + "*#*" + l14.get(i).getId();
                respaldo = respaldo + "*#*" + l14.get(i).getCompra();
                respaldo = respaldo + "*#*" + l14.get(i).getFecha();
                respaldo = respaldo + "*#*" + l14.get(i).getPagado();
                respaldo = respaldo + "*#*" + l14.get(i).getObservacion();
                respaldo = respaldo + "*#*" + l14.get(i).getSaldo();
                respaldo = respaldo + "*#*" + l14.get(i).getContraRecibo();
                respaldo = respaldo + "*#*" + l14.get(i).getProveedor();
                respaldo = respaldo + "*#*" + l14.get(i).getFechaExpiracion();
                respaldo = respaldo + "*#*" + l14.get(i).getTn();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
          //Devoluciones
        if(Boolean.valueOf(jTable1.getValueAt(12, 1).toString()) == true)
        {
        hDevoluciones h15 = new hDevoluciones();
        List<Devoluciones> l15 = h15.consultaVentas2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/devoluciones.txt");
 
            for (int i = 0; i < l15.size(); i++)
            {
                respaldo = respaldo + "*#*" + l15.get(i).getId();
                respaldo = respaldo + "*#*" + l15.get(i).getIdusuario();
                respaldo = respaldo + "*#*" + l15.get(i).getIdcliente();
                respaldo = respaldo + "*#*" + l15.get(i).getIdadministrador();
                respaldo = respaldo + "*#*" + l15.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l15.get(i).getCodigoVenta();
                respaldo = respaldo + "*#*" + l15.get(i).getArticulos();
                respaldo = respaldo + "*#*" + l15.get(i).getPartidas();
                respaldo = respaldo + "*#*" + l15.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l15.get(i).getTotal();
                respaldo = respaldo + "*#*" + l15.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l15.get(i).getTipoDeVenta();
                respaldo = respaldo + "*#*" + l15.get(i).getFechaVenta();
                respaldo = respaldo + "*#*" + l15.get(i).getEstado();
                respaldo = respaldo + "*#*" + l15.get(i).getEstadoFactura();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
          //Facturas
        if(Boolean.valueOf(jTable1.getValueAt(13, 1).toString()) == true)
        {
        hFacturas h16 = new hFacturas();
        List<Factura> l16 = h16.consultaFacturas2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/facturas.txt");
 
            for (int i = 0; i < l16.size(); i++)
            {
                respaldo = respaldo + "*#*" + l16.get(i).getIdFactura();
                respaldo = respaldo + "*#*" + l16.get(i).getVersion();
                respaldo = respaldo + "*#*" + l16.get(i).getSerie();
                respaldo = respaldo + "*#*" + l16.get(i).getFolio();
                respaldo = respaldo + "*#*" + l16.get(i).getFecha();
                respaldo = respaldo + "*#*" + l16.get(i).getNoAprobacion();
                respaldo = respaldo + "*#*" + l16.get(i).getAnoAprobacion();
                respaldo = respaldo + "*#*" + l16.get(i).getFormaDePago();
                respaldo = respaldo + "*#*" + l16.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l16.get(i).getDescuento();
                respaldo = respaldo + "*#*" + l16.get(i).getTotal();
                respaldo = respaldo + "*#*" + l16.get(i).getTotalLetra();
                respaldo = respaldo + "*#*" + l16.get(i).getTipoDeComprobante();
                respaldo = respaldo + "*#*" + l16.get(i).getNoCertificado();
                respaldo = respaldo + "*#*" + l16.get(i).getCertificado();
                respaldo = respaldo + "*#*" + l16.get(i).getSello();
                respaldo = respaldo + "*#*" + l16.get(i).getIdEmisorF();
                respaldo = respaldo + "*#*" + l16.get(i).getIdReceptorF();
                respaldo = respaldo + "*#*" + l16.get(i).getIdConceptoFactura();
                respaldo = respaldo + "*#*" + l16.get(i).getImpuesto();
                respaldo = respaldo + "*#*" + l16.get(i).getTasa();
                respaldo = respaldo + "*#*" + l16.get(i).getImporteImp();
                respaldo = respaldo + "*#*" + l16.get(i).getFolioInterno();
                respaldo = respaldo + "*#*" + l16.get(i).getRegimen();
                respaldo = respaldo + "*#*" + l16.get(i).getCadenaCompleta();
                respaldo = respaldo + "*#*" + l16.get(i).getMotivo();
                respaldo = respaldo + "*#*" + l16.get(i).getFechaReporte();
                respaldo = respaldo + "*#*" + l16.get(i).getCantidadArticulos();
                respaldo = respaldo + "*#*" + l16.get(i).getMovimiento();
                respaldo = respaldo + "*#*" + l16.get(i).getNumMovimiento();
                respaldo = respaldo + "*#*" + l16.get(i).getCancelada();
                respaldo = respaldo + "*#*" + l16.get(i).getVersionTimbre();
                respaldo = respaldo + "*#*" + l16.get(i).getUuid();
                respaldo = respaldo + "*#*" + l16.get(i).getFechaTimbrado();
                respaldo = respaldo + "*#*" + l16.get(i).getSelloSAT();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
            //FacturasCFDI
        if(Boolean.valueOf(jTable1.getValueAt(14, 1).toString()) == true)
        {
        hFacturasCFDI h17 = new hFacturasCFDI();
        List<Factura> l17 = h17.consultaFacturas2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/facturascfdi.txt");
 
            for (int i = 0; i < l17.size(); i++)
            {
                respaldo = respaldo + "*#*" + l17.get(i).getIdFactura();
                respaldo = respaldo + "*#*" + l17.get(i).getVersion();
                respaldo = respaldo + "*#*" + l17.get(i).getSerie();
                respaldo = respaldo + "*#*" + l17.get(i).getFolio();
                respaldo = respaldo + "*#*" + l17.get(i).getFecha();
                respaldo = respaldo + "*#*" + l17.get(i).getNoAprobacion();
                respaldo = respaldo + "*#*" + l17.get(i).getAnoAprobacion();
                respaldo = respaldo + "*#*" + l17.get(i).getFormaDePago();
                respaldo = respaldo + "*#*" + l17.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l17.get(i).getDescuento();
                respaldo = respaldo + "*#*" + l17.get(i).getTotal();
                respaldo = respaldo + "*#*" + l17.get(i).getTotalLetra();
                respaldo = respaldo + "*#*" + l17.get(i).getTipoDeComprobante();
                respaldo = respaldo + "*#*" + l17.get(i).getNoCertificado();
                respaldo = respaldo + "*#*" + l17.get(i).getCertificado();
                respaldo = respaldo + "*#*" + l17.get(i).getSello();
                respaldo = respaldo + "*#*" + l17.get(i).getIdEmisorF();
                respaldo = respaldo + "*#*" + l17.get(i).getIdReceptorF();
                respaldo = respaldo + "*#*" + l17.get(i).getIdConceptoFactura();
                respaldo = respaldo + "*#*" + l17.get(i).getImpuesto();
                respaldo = respaldo + "*#*" + l17.get(i).getTasa();
                respaldo = respaldo + "*#*" + l17.get(i).getImporteImp();
                respaldo = respaldo + "*#*" + l17.get(i).getFolioInterno();
                respaldo = respaldo + "*#*" + l17.get(i).getRegimen();
                respaldo = respaldo + "*#*" + l17.get(i).getCadenaCompleta();
                respaldo = respaldo + "*#*" + l17.get(i).getMotivo();
                respaldo = respaldo + "*#*" + l17.get(i).getFechaReporte();
                respaldo = respaldo + "*#*" + l17.get(i).getCantidadArticulos();
                respaldo = respaldo + "*#*" + l17.get(i).getMovimiento();
                respaldo = respaldo + "*#*" + l17.get(i).getNumMovimiento();
                respaldo = respaldo + "*#*" + l17.get(i).getCancelada();
                respaldo = respaldo + "*#*" + l17.get(i).getVersionTimbre();
                respaldo = respaldo + "*#*" + l17.get(i).getUuid();
                respaldo = respaldo + "*#*" + l17.get(i).getFechaTimbrado();
                respaldo = respaldo + "*#*" + l17.get(i).getSelloSAT();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
         //Kardex
        if(Boolean.valueOf(jTable1.getValueAt(15, 1).toString()) == true)
        {
        hKardex h18 = new hKardex();
        List<Kardex> l18 = h18.consultaKardex2();
        try
        {
            fichero = new FileWriter("respaldo/kardex.txt");
 
            for (int i = 0; i < l18.size(); i++)
            {
                respaldo = respaldo + "*#*" + l18.get(i).getId();
                respaldo = respaldo + "*#*" + l18.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l18.get(i).getArticulo();
                respaldo = respaldo + "*#*" + l18.get(i).getMovimiento();
                respaldo = respaldo + "*#*" + l18.get(i).getFecha();
                respaldo = respaldo + "*#*" + l18.get(i).getEntrada();
                respaldo = respaldo + "*#*" + l18.get(i).getSalida();
                respaldo = respaldo + "*#*" + l18.get(i).getExistencias();
                respaldo = respaldo + "*#*" + l18.get(i).getReservados();
                respaldo = respaldo + "*#*" + l18.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l18.get(i).getResponsable();
                respaldo = respaldo + "*#*" + l18.get(i).getRefFerrari();
                respaldo = respaldo + "*#*" + l18.get(i).getModificacion();
                respaldo = respaldo + "*#*" + l18.get(i).getUltimoCosto();
                respaldo = respaldo + "*#*" + l18.get(i).getNoMov();
                respaldo = respaldo + "*#*" + l18.get(i).getAlmacenista();
                respaldo = respaldo + "*#*" + l18.get(i).getVendidoEn();
                respaldo = respaldo + "*#*" + l18.get(i).getResponsable2();
                respaldo = respaldo + "*#*" + l18.get(i).getAnticipos();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
          //Lineas
         if(Boolean.valueOf(jTable1.getValueAt(16, 1).toString()) == true)
        {
        hLineas h19 = new hLineas();
        List<Linea> l19 = h19.consultaLineas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/lineas.txt");
 
            for (int i = 0; i < l19.size(); i++)
            {
                respaldo = respaldo + "*#*" + l19.get(i).getId();
                respaldo = respaldo + "*#*" + l19.get(i).getNombre();
                respaldo = respaldo + "*#*" + l19.get(i).getDescripcion();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
         //Partidasventaanticipos
        if(Boolean.valueOf(jTable1.getValueAt(17, 1).toString()) == true)
        {
        hPartidaVentaAnticipos h20 = new hPartidaVentaAnticipos();
        List<Partidasventaanticipos> l20 = h20.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/partidasventaanticipos.txt");
 
            for (int i = 0; i < l20.size(); i++)
            {
                respaldo = respaldo + "*#*" + l20.get(i).getId();
                respaldo = respaldo + "*#*" + l20.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l20.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l20.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l20.get(i).getDescripcionArticulo();
                respaldo = respaldo + "*#*" + l20.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l20.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l20.get(i).getTipoBeneficio();
                respaldo = respaldo + "*#*" + l20.get(i).getBeneficio();
                respaldo = respaldo + "*#*" + l20.get(i).getConBeneficio();
                respaldo = respaldo + "*#*" + l20.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l20.get(i).getSubtotal();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }   
        }
        
        //Partidas
         if(Boolean.valueOf(jTable1.getValueAt(18, 1).toString()) == true)
        {
        hPartidas h21 = new hPartidas();
        List<Partidas> l21 = h21.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/partidas.txt");
 
            for (int i = 0; i < l21.size(); i++)
            {
                respaldo = respaldo + "*#*" + l21.get(i).getId();
                respaldo = respaldo + "*#*" + l21.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l21.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l21.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l21.get(i).getDescripcionArticulo();
                respaldo = respaldo + "*#*" + l21.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l21.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l21.get(i).getTipoBeneficio();
                respaldo = respaldo + "*#*" + l21.get(i).getBeneficio();
                respaldo = respaldo + "*#*" + l21.get(i).getConBeneficio();
                respaldo = respaldo + "*#*" + l21.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l21.get(i).getSubtotal();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
         //Partidasanticipos
        if(Boolean.valueOf(jTable1.getValueAt(19, 1).toString()) == true)
        {
        hPartidasAnticipos h22 = new hPartidasAnticipos();
        List<Partidasanticipos> l22 = h22.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/partidasanticipos.txt");
 
            for (int i = 0; i < l22.size(); i++)
            {
                respaldo = respaldo + "*#*" + l22.get(i).getId();
                respaldo = respaldo + "*#*" + l22.get(i).getAnticipo();
                respaldo = respaldo + "*#*" + l22.get(i).getCodigoarticulo();
                respaldo = respaldo + "*#*" + l22.get(i).getIdarticulo();
                respaldo = respaldo + "*#*" + l22.get(i).getArticulo();
                respaldo = respaldo + "*#*" + l22.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l22.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l22.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l22.get(i).getSurtido();
                respaldo = respaldo + "*#*" + l22.get(i).getSurtidoAlmacen();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
         
        //Partidascompras
         if(Boolean.valueOf(jTable1.getValueAt(20, 1).toString()) == true)
        {
        hPartidasCompras h23 = new hPartidasCompras();
        List<Partidascompras> l23 = h23.consultaPCompras("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Partidascompras.txt");
 
            for (int i = 0; i < l23.size(); i++)
            {
                respaldo = respaldo + "*#*" + l23.get(i).getId();
                respaldo = respaldo + "*#*" + l23.get(i).getCompra();
                respaldo = respaldo + "*#*" + l23.get(i).getArticulo();
                respaldo = respaldo + "*#*" + l23.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l23.get(i).getPrecioUni();
                respaldo = respaldo + "*#*" + l23.get(i).getDescuento();
                respaldo = respaldo + "*#*" + l23.get(i).getDescuentoArti();
                respaldo = respaldo + "*#*" + l23.get(i).getCostoDesc();
                respaldo = respaldo + "*#*" + l23.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l23.get(i).getMontoIva();
                respaldo = respaldo + "*#*" + l23.get(i).getTotal();
                respaldo = respaldo + "*#*" + l23.get(i).getIva();
                respaldo = respaldo + "*#*" + l23.get(i).getPorcCargo();
                respaldo = respaldo + "*#*" + l23.get(i).getCargoArticulo();
                respaldo = respaldo + "*#*" + l23.get(i).getDevuelta();
                respaldo = respaldo + "*#*" + l23.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l23.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l23.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l23.get(i).getStockMin();
                respaldo = respaldo + "*#*" + l23.get(i).getStockMax();
                respaldo = respaldo + "*#*" + l23.get(i).getUtilidad();
                respaldo = respaldo + "*#*" + l23.get(i).getCascada();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
       //Partidascomprasmayoreo
        if(Boolean.valueOf(jTable1.getValueAt(21, 1).toString()) == true)
        {
        hPartidasComprasMayoreo h24 = new hPartidasComprasMayoreo();
        List<Partidascomprasmayoreo> l24 = h24.consultaPCompras("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Partidascomprasmayoreo.txt");
 
            for (int i = 0; i < l24.size(); i++)
            {
                respaldo = respaldo + "*#*" + l24.get(i).getId();
                respaldo = respaldo + "*#*" + l24.get(i).getCompra();
                respaldo = respaldo + "*#*" + l24.get(i).getArticulo();
                respaldo = respaldo + "*#*" + l24.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l24.get(i).getPrecioUni();
                respaldo = respaldo + "*#*" + l24.get(i).getDescuento();
                respaldo = respaldo + "*#*" + l24.get(i).getDescuentoArti();
                respaldo = respaldo + "*#*" + l24.get(i).getCostoDesc();
                respaldo = respaldo + "*#*" + l24.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l24.get(i).getMontoIva();
                respaldo = respaldo + "*#*" + l24.get(i).getTotal();
                respaldo = respaldo + "*#*" + l24.get(i).getIva();
                respaldo = respaldo + "*#*" + l24.get(i).getPorcCargo();
                respaldo = respaldo + "*#*" + l24.get(i).getCargoArticulo();
                respaldo = respaldo + "*#*" + l24.get(i).getDevuelta();
                respaldo = respaldo + "*#*" + l24.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l24.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l24.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l24.get(i).getStockMin();
                respaldo = respaldo + "*#*" + l24.get(i).getStockMax();
                respaldo = respaldo + "*#*" + l24.get(i).getUtilidad();
                respaldo = respaldo + "*#*" + l24.get(i).getCascada();
                respaldo = respaldo + "*#*" + l24.get(i).getReferencia();
                respaldo = respaldo + "*#*" + l24.get(i).getMotivoDevolucion();
                respaldo = respaldo + "*#*" + l24.get(i).getCadenaCascada();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
        }
        
            
        //Partidasdevoluciones
        if(Boolean.valueOf(jTable1.getValueAt(22, 1).toString()) == true)
        {
        hPartidasDevoluciones h27 = new hPartidasDevoluciones();
        List<Partidasdevoluciones> l27 = h27.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Partidasdevoluciones.txt");
 
            for (int i = 0; i < l27.size(); i++)
            {
                respaldo = respaldo + "*#*" + l27.get(i).getId();
                respaldo = respaldo + "*#*" + l27.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l27.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l27.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l27.get(i).getDescripcionArticulo();
                respaldo = respaldo + "*#*" + l27.get(i).getPrecioCompra();
                respaldo = respaldo + "*#*" + l27.get(i).getPrecioVenta();
                respaldo = respaldo + "*#*" + l27.get(i).getTipoBeneficio();
                respaldo = respaldo + "*#*" + l27.get(i).getBeneficio();
                respaldo = respaldo + "*#*" + l27.get(i).getConBeneficio();
                respaldo = respaldo + "*#*" + l27.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l27.get(i).getSubtotal();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
       //Partidasreservaciones
        if(Boolean.valueOf(jTable1.getValueAt(23, 1).toString()) == true)
        {
        hPartidasReservaciones h28 = new hPartidasReservaciones();
        List<Partidasreservaciones> l28 = h28.consultaPReservaciones("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Partidasreservaciones.txt");
 
            for (int i = 0; i < l28.size(); i++)
            {
                respaldo = respaldo + "*#*" + l28.get(i).getId();
                respaldo = respaldo + "*#*" + l28.get(i).getCodRes();
                respaldo = respaldo + "*#*" + l28.get(i).getCodArt();
                respaldo = respaldo + "*#*" + l28.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l28.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l28.get(i).getReservado();
                respaldo = respaldo + "*#*" + l28.get(i).getSurtido();
                respaldo = respaldo + "*#*" + l28.get(i).getVale();
                respaldo = respaldo + "*#*" + l28.get(i).getCosto();
                respaldo = respaldo + "*#*" + l28.get(i).getPrecio();
                respaldo = respaldo + "*#*" + l28.get(i).getIdArt();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
        //PartidasFacturasCFD
        if(Boolean.valueOf(jTable1.getValueAt(24, 1).toString()) == true)
        {
        hPartidasfacturas h29 = new hPartidasfacturas();
        List<Partidasfacturas> l29 = h29.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/PartidasFacturasCFD.txt");
 
            for (int i = 0; i < l29.size(); i++)
            {
                respaldo = respaldo + "*#*" + l29.get(i).getId();
                respaldo = respaldo + "*#*" + l29.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l29.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l29.get(i).getPrecioUnitario();
                respaldo = respaldo + "*#*" + l29.get(i).getImporte();
                respaldo = respaldo + "*#*" + l29.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l29.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l29.get(i).getIdFactura();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
                //PartidasFacturasCFDI
        if(Boolean.valueOf(jTable1.getValueAt(25, 1).toString()) == true)
        {
        hPartidasfacturasCFDI h30 = new hPartidasfacturasCFDI();
        List<Partidasfacturas> l30 = h30.consultaPartidas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/PartidasFacturasCFDI.txt");
 
            for (int i = 0; i < l30.size(); i++)
            {
                respaldo = respaldo + "*#*" + l30.get(i).getId();
                respaldo = respaldo + "*#*" + l30.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l30.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l30.get(i).getPrecioUnitario();
                respaldo = respaldo + "*#*" + l30.get(i).getImporte();
                respaldo = respaldo + "*#*" + l30.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l30.get(i).getIdVenta();
                respaldo = respaldo + "*#*" + l30.get(i).getIdFactura();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
        //Pedidos
        if(Boolean.valueOf(jTable1.getValueAt(26, 1).toString()) == true)
        {
        hPedidos h31 = new hPedidos();
        List<Pedidos> l31 = h31.consultaPedidos2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/pedidos.txt");
 
            for (int i = 0; i < l31.size(); i++)
            {
                respaldo = respaldo + "*#*" + l31.get(i).getId();
                respaldo = respaldo + "*#*" + l31.get(i).getIdArticulo();
                respaldo = respaldo + "*#*" + l31.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l31.get(i).getDescripcion();
                respaldo = respaldo + "*#*" + l31.get(i).getCosto();
                respaldo = respaldo + "*#*" + l31.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l31.get(i).getFechaIni();
                respaldo = respaldo + "*#*" + l31.get(i).getFechaFin();
                respaldo = respaldo + "*#*" + l31.get(i).getProveedor();
                respaldo = respaldo + "*#*" + l31.get(i).getSurtido();
                respaldo = respaldo + "*#*" + l31.get(i).getDe();
                respaldo = respaldo + "*#*" + l31.get(i).getReferencia();
                respaldo = respaldo + "*#*" + l31.get(i).getPrecio();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }  
        }
        
        //Pedidosventas
        if(Boolean.valueOf(jTable1.getValueAt(27, 1).toString()) == true)
        {
        hPedidosVentas h32 = new hPedidosVentas();
        List<Pedidosventas> l32 = h32.consultaPedidosVentas("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Pedidosventas.txt");
 
            for (int i = 0; i < l32.size(); i++)
            {
                respaldo = respaldo + "*#*" + l32.get(i).getId();
                respaldo = respaldo + "*#*" + l32.get(i).getVenta();
                respaldo = respaldo + "*#*" + l32.get(i).getCodigoArticulo();
                respaldo = respaldo + "*#*" + l32.get(i).getCantidad();
                respaldo = respaldo + "*#*" + l32.get(i).getPrecioUnitario();
                respaldo = respaldo + "*#*" + l32.get(i).getVendedor();
                respaldo = respaldo + "*#*" + l32.get(i).getFecha();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
       //Permisos
        if(Boolean.valueOf(jTable1.getValueAt(28, 1).toString()) == true)
        {
        hPermisos h33 = new hPermisos();
        List<Permisos> l33 = h33.consultaPermiso("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Permisos.txt");
 
            for (int i = 0; i < l33.size(); i++)
            {
                respaldo = respaldo + "*#*" + l33.get(i).getId();
                respaldo = respaldo + "*#*" + l33.get(i).getIdUsuario();
                respaldo = respaldo + "*#*" + l33.get(i).getPermisos();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
        
       //Proveedores
        if(Boolean.valueOf(jTable1.getValueAt(29, 1).toString()) == true)
        {
        hProveedores h34 = new hProveedores();
        List<Proveedores> l34 = h34.consultaProveedores("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/proveedores.txt");
 
            for (int i = 0; i < l34.size(); i++)
            {
                respaldo = respaldo + "*#*" + l34.get(i).getId();
                respaldo = respaldo + "*#*" + l34.get(i).getRfc();
                respaldo = respaldo + "*#*" + l34.get(i).getNombre();
                respaldo = respaldo + "*#*" + l34.get(i).getClasificacion();
                respaldo = respaldo + "*#*" + l34.get(i).getTelefono();
                respaldo = respaldo + "*#*" + l34.get(i).getAtencion();
                respaldo = respaldo + "*#*" + l34.get(i).getCalle();
                respaldo = respaldo + "*#*" + l34.get(i).getNumero();
                respaldo = respaldo + "*#*" + l34.get(i).getColonia();
                respaldo = respaldo + "*#*" + l34.get(i).getPoblacion();
                respaldo = respaldo + "*#*" + l34.get(i).getEstado();
                respaldo = respaldo + "*#*" + l34.get(i).getCodigoPostal();
                respaldo = respaldo + "*#*" + l34.get(i).getCorreo();
                respaldo = respaldo + "*#*" + l34.get(i).getDiasCredito();
                respaldo = respaldo + "*#*" + l34.get(i).getDiasLimite();
                respaldo = respaldo + "*#*" + l34.get(i).getDescuento();
                respaldo = respaldo + "*#*" + l34.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l34.get(i).getNombreCorto();
                respaldo = respaldo + "*#*" + l34.get(i).getLimiteCredito();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc1();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc2();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc3();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc4();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc5();
                respaldo = respaldo + "*#*" + l34.get(i).getDesc6();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
       //Reimpresiones
        if(Boolean.valueOf(jTable1.getValueAt(30, 1).toString()) == true)
        {
        hReimpresiones h35 = new hReimpresiones();
       List<Reimpresiones> l35 = h35.consultaPedidos2("", "*", ""); 
        try
        {
            fichero = new FileWriter("respaldo/Reimpresiones.txt");
 
            for (int i = 0; i < l35.size(); i++)
            {
                respaldo = respaldo + "*#*" + l35.get(i).getId();
                respaldo = respaldo + "*#*" + l35.get(i).getUsuario();
                respaldo = respaldo + "*#*" + l35.get(i).getFolio();
                respaldo = respaldo + "*#*" + l35.get(i).getFecha();
                respaldo = respaldo + "*#*" + l35.get(i).getImporte();
                respaldo = respaldo + "*#*" + l35.get(i).getVendedor();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
       //Reservaciones
        if(Boolean.valueOf(jTable1.getValueAt(31, 1).toString()) == true)
        {
        hReservaciones h36 = new hReservaciones();
        List<Reservaciones> l36 = h36.consultaReservaciones2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Reservaciones.txt");
 
            for (int i = 0; i < l36.size(); i++)
            {
                respaldo = respaldo + "*#*" + l36.get(i).getId();
                respaldo = respaldo + "*#*" + l36.get(i).getCodigo();
                respaldo = respaldo + "*#*" + l36.get(i).getFacturada();
                respaldo = respaldo + "*#*" + l36.get(i).getFecha();
                respaldo = respaldo + "*#*" + l36.get(i).getCodcliente();
                respaldo = respaldo + "*#*" + l36.get(i).getCodventa();
                respaldo = respaldo + "*#*" + l36.get(i).getNomCli();
                respaldo = respaldo + "*#*" + l36.get(i).getSiniestro();
                respaldo = respaldo + "*#*" + l36.get(i).getTaller();
                respaldo = respaldo + "*#*" + l36.get(i).getMarca();
                respaldo = respaldo + "*#*" + l36.get(i).getSerie();
                respaldo = respaldo + "*#*" + l36.get(i).getTipoAuto();
                respaldo = respaldo + "*#*" + l36.get(i).getPlacas();
                respaldo = respaldo + "*#*" + l36.get(i).getModelo();
                respaldo = respaldo + "*#*" + l36.get(i).getColor();
                respaldo = respaldo + "*#*" + l36.get(i).getPoliza();
                respaldo = respaldo + "*#*" + l36.get(i).getPuertas();
                respaldo = respaldo + "*#*" + l36.get(i).getAsegurado();
                respaldo = respaldo + "*#*" + l36.get(i).getSolicito();
                respaldo = respaldo + "*#*" + l36.get(i).getDevolucion();
                respaldo = respaldo + "*#*" + l36.get(i).getCancelada();
                respaldo = respaldo + "*#*" + l36.get(i).getFechaDevol();
                respaldo = respaldo + "*#*" + l36.get(i).getObsCancel();
                respaldo = respaldo + "*#*" + l36.get(i).getNomotor();
                respaldo = respaldo + "*#*" + l36.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l36.get(i).getNovale();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        //Ubicaciones
        if(Boolean.valueOf(jTable1.getValueAt(32, 1).toString()) == true)
        {
        hUbicacion h37 = new hUbicacion();
        List<Ubicacion> l37 = h37.consultaUbicaciones("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/ubicaciones.txt");
 
            for (int i = 0; i < l37.size(); i++)
            {
                respaldo = respaldo + "*#*" + l37.get(i).getId();
                respaldo = respaldo + "*#*" + l37.get(i).getUbicacion();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
       //Usuarios
        if(Boolean.valueOf(jTable1.getValueAt(33, 1).toString()) == true)
        {
        hUsuarios h38 = new hUsuarios();
       List<Usuarios> l38 = h38.consultaUsuarios("", "*", ""); 
        try
        {
            fichero = new FileWriter("respaldo/Usuario.txt");
 
            for (int i = 0; i < l38.size(); i++)
            {
                respaldo = respaldo + "*#*" + l38.get(i).getId();
                respaldo = respaldo + "*#*" + l38.get(i).getNombres();
                respaldo = respaldo + "*#*" + l38.get(i).getApellidoP();
                respaldo = respaldo + "*#*" + l38.get(i).getApellidoM();
                respaldo = respaldo + "*#*" + l38.get(i).getContrasena();
                respaldo = respaldo + "*#*" + l38.get(i).getPuesto();
                respaldo = respaldo + "*#*" + l38.get(i).getCorreo();
                respaldo = respaldo + "*#*" + l38.get(i).getFoto();
                respaldo = respaldo + "*#*" + l38.get(i).getDescMax();
                respaldo = respaldo + "*#*" + l38.get(i).getUtilMax();
                respaldo = respaldo + "*#*" + l38.get(i).getRangoPrecio();
                respaldo = respaldo + "*#*" + l38.get(i).getComision();
                respaldo = respaldo + "*#*" + l38.get(i).getMeta();
                respaldo = respaldo + "*#*" + l38.get(i).getMetaPasada();
                respaldo = respaldo + "*#*" + l38.get(i).getMetaPasada2();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
       //VentasAnticipos
       if(Boolean.valueOf(jTable1.getValueAt(34, 1).toString()) == true)
        {
       hVentaAnticipos h39 = new hVentaAnticipos();
       List<Ventaanticipos> l39 = h39.consultaVentas2("", "*", ""); 
        try
        {
            fichero = new FileWriter("respaldo/VentasAnticipos.txt");
 
            for (int i = 0; i < l39.size(); i++)
            {
                respaldo = respaldo + "*#*" + l39.get(i).getId();
                respaldo = respaldo + "*#*" + l39.get(i).getIdusuario();
                respaldo = respaldo + "*#*" + l39.get(i).getIdcliente();
                respaldo = respaldo + "*#*" + l39.get(i).getIdadministrador();
                respaldo = respaldo + "*#*" + l39.get(i).getArticulos();
                respaldo = respaldo + "*#*" + l39.get(i).getPartidas();
                respaldo = respaldo + "*#*" + l39.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l39.get(i).getTotal();
                respaldo = respaldo + "*#*" + l39.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l39.get(i).getTipoDeVenta();
                respaldo = respaldo + "*#*" + l39.get(i).getFechaVenta();
                respaldo = respaldo + "*#*" + l39.get(i).getEstado();
                respaldo = respaldo + "*#*" + l39.get(i).getEstadoFactura();
                respaldo = respaldo + "*#*" + l39.get(i).getVale();
                respaldo = respaldo + "*#*" + l39.get(i).getIva();
                respaldo = respaldo + "*#*" + l39.get(i).getAnticipo();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
        //Ventas
        if(Boolean.valueOf(jTable1.getValueAt(35, 1).toString()) == true)
        {
        hVentas h40 = new hVentas();
        List<Ventas> l40 = h40.consultaVentas2("", "*", "");
        try
        {
            fichero = new FileWriter("respaldo/Ventas.txt");
 
            for (int i = 0; i < l40.size(); i++)
            {
                respaldo = respaldo + "*#*" + l40.get(i).getId();
                respaldo = respaldo + "*#*" + l40.get(i).getIdusuario();
                respaldo = respaldo + "*#*" + l40.get(i).getIdcliente();
                respaldo = respaldo + "*#*" + l40.get(i).getIdadministrador();
                respaldo = respaldo + "*#*" + l40.get(i).getArticulos();
                respaldo = respaldo + "*#*" + l40.get(i).getPartidas();
                respaldo = respaldo + "*#*" + l40.get(i).getSubtotal();
                respaldo = respaldo + "*#*" + l40.get(i).getTotal();
                respaldo = respaldo + "*#*" + l40.get(i).getObservaciones();
                respaldo = respaldo + "*#*" + l40.get(i).getTipoDeVenta();
                respaldo = respaldo + "*#*" + l40.get(i).getFechaVenta();
                respaldo = respaldo + "*#*" + l40.get(i).getEstado();
                respaldo = respaldo + "*#*" + l40.get(i).getEstadoFactura();
                respaldo = respaldo + "*#*" + l40.get(i).getVale();
                respaldo = respaldo + "*#*" + l40.get(i).getIva();
                respaldo = respaldo + "\n";
            }
             bw = new BufferedWriter(fichero);
             bw.write(respaldo);
	     bw.close();
 
 
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        } 
        }
        
        JOptionPane.showMessageDialog(null, "Respaldo Realizado");
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    Vector vector;
    Vector<String> encabezado;
    DefaultTableModel dtm;
    ButtonGroup bg;
    String [] tablas= {"Almacén de Devoluciones",
    "Anticipos",
    "Líneas en Artículos",
    "Proveedores en Artículos",
    "Ubicaciones en Artículos",
    "Artículos en Mostrador",
    "Blog",
    "Catálogo de Clientes",
    "Catálogo de Artículos",
    "Catálogo de Compras por Mayoreo",
    "Cuentas por Cobrar",
    "Cuentas por Pagar",
    "Devoluciones",
    "Factura CFD",
    "Factura CFDI",
    "Kardex",
    "Líneas",
    "Partidas en Venta Anticipos",
    "Partidas de Ventas",
    "Partidas de Anticipos",
    "Partidas de Compras",
    "Partidas de Compras en Mayoreo",
    "Partidas de Devoluciones",
    "Partidas en Reservaciones",
    "Partidas de Facturas",
    "Partidas de Facturas en CFDI",
    "Pedidos",
    "Backorder",
    "Permisos",
    "Proveedores",
    "Reimpresiones",
    "Reservaciones",
    "Ubicación",
    "Usuarios",
    "Anticipos Vendidos",
    "Ventas"
    };
            
    
    
    private void inicializar() {
        
        bg = new ButtonGroup();
        bg.add(jCheckBox1);
        bg.add(jCheckBox2);

        
        encabezado = new Vector<String>();
        encabezado.add("Tabla");
        encabezado.add("Selección");    
        vector = new Vector();
        
       for(int i=0; i<tablas.length; i++)
       {
             Vector<Object> unaFila = new Vector<Object>();
             unaFila.add(tablas[i]);
             unaFila.add(true);
             vector.add(unaFila);
       }
        
        dtm = new DefaultTableModel(vector,encabezado) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              
               @Override
             public Class<?> getColumnClass(int columnIndex) {
              if (columnIndex == 1) {
              return Boolean.class;
               }
               return super.getColumnClass(columnIndex);
                }
              
              };
          
       jTable1.setModel(dtm);
        
        
    }
}
