/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.paedeias.vistas;

import com.paedeias.controladores.CConfiguracion;
import com.paedeias.controladores.CGlobalConfig;
import com.paedeias.controladores.CPrincipal;
import com.paedeias.controladores.Validadores;
import com.paedeias.helpers.*;
import com.paedeias.identidades.*;
import java.awt.Rectangle;
import java.awt.Window;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ALL
 */
public class VActualiza_Pedidos extends javax.swing.JPanel {

    /**
     * Creates new form VAltaCompras
     */
    public VActualiza_Pedidos(ComprasMayoreo compras) {
        initComponents();
        inicializar(compras);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        jLabel30 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel36 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton10 = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos del Artículo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 102)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Buscar artículos en donde");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sinónimo", "Código", "Descripción" }));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("sea");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "igual", "como" }));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("a");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainicons/btn_buscar.png"))); // NOI18N
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Proveedor");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Referencia");

        jTextField12.setEditable(false);
        jTextField12.setText("0");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(102, 102, 102));
        jLabel29.setText("Escala");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(102, 102, 102));
        jLabel30.setText("Buscar proveedor");

        jTextField17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField17ActionPerformed(evt);
            }
        });

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mainicons/btn_buscar.png"))); // NOI18N
        jButton9.setBorderPainted(false);
        jButton9.setContentAreaFilled(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(102, 102, 102));
        jLabel31.setText("Factura");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(102, 102, 102));
        jLabel35.setText("Compra expira");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(102, 102, 102));
        jLabel36.setText("TN");

        jTextField19.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel30)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField17))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel30)
                        .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel36)
                        .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel19)
                        .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel29)
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31)
                        .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de Registro del Artículo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 102)));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Descuento");

        jTextField4.setText("0");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField4FocusLost(evt);
            }
        });

        jTextField5.setText("0");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Precio Compra");

        jTextField3.setText("0");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Cargos");

        jTextField2.setText("1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Cantidad");

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(102, 102, 102));
        jCheckBox1.setText("Cascada");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton10.setText("QI");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(102, 102, 102));
        jLabel34.setText("Precio Total");

        jTextField6.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1)
                    .addComponent(jButton10)
                    .addComponent(jLabel34)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Define el precio de venta"));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Descuento");

        jTextField7.setText("0");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        jTextField8.setText("0");
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Importe Total con IVA");

        jTextField9.setText("0");
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Utilidad");

        jButton11.setText("QI");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel10.setText("|");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Stock Mínimo");

        jTextField10.setText("0");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Stock Máximo");

        jTextField11.setText("0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton11)
                        .addComponent(jLabel10))))
        );

        jButton2.setBackground(new java.awt.Color(11, 70, 119));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Agregar");
        jButton2.setContentAreaFilled(false);
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(11, 70, 119));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Eliminar");
        jButton3.setContentAreaFilled(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(11, 70, 119));
        jButton12.setForeground(new java.awt.Color(255, 255, 255));
        jButton12.setText("Actualizar Partidas");
        jButton12.setContentAreaFilled(false);
        jButton12.setEnabled(false);
        jButton12.setOpaque(true);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(11, 70, 119));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Actualizar datos de partida");
        jButton8.setContentAreaFilled(false);
        jButton8.setOpaque(true);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton12)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton12)
                    .addComponent(jButton8))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos de los Artículos Registrados", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(102, 102, 102)));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(246, 246, 246))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Partidas");

        jLabel16.setText("0000");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Subtotal");

        jLabel18.setText("0000.00");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("IVA");

        jLabel24.setText("0000");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(102, 102, 102));
        jLabel25.setText("Total");

        jLabel26.setText("0000.00");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(102, 102, 102));
        jLabel20.setText("Descuento adicional");

        jTextField13.setText("0.0");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(102, 102, 102));
        jLabel21.setText("Descuento adicional (en %)");

        jTextField14.setText("0");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(102, 102, 102));
        jLabel22.setText("%");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(102, 102, 102));
        jLabel27.setText("Cargo Adicional");

        jTextField15.setText("0.0");

        jButton6.setBackground(new java.awt.Color(11, 70, 119));
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Aplicar");
        jButton6.setContentAreaFilled(false);
        jButton6.setOpaque(true);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(102, 102, 102));
        jLabel32.setText("Cantidad");

        jLabel33.setText("0000");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addContainerGap(137, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26)
                    .addComponent(jLabel32)
                    .addComponent(jLabel33))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel27)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jButton4.setBackground(new java.awt.Color(11, 70, 119));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Cerrar Compra");
        jButton4.setContentAreaFilled(false);
        jButton4.setOpaque(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(102, 102, 102));
        jLabel28.setText("Observaciones");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField16)
                        .addGap(214, 214, 214)
                        .addComponent(jButton4))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel28)
                        .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        bandera = false;
               String valores [] = {"sinonimo","codigo","descripcion"};
        String comparadores [] = {"=","LIKE"};
        
        String campo = valores[jComboBox1.getSelectedIndex()];
        String compara = comparadores[jComboBox2.getSelectedIndex()];
        String condicion = jTextField1.getText();
        
        if(!listaArticulos.isEmpty())
        listaArticulos.clear();
        if(campo.equals("sinonimo"))
        listaArticulos = harticuloproveedor.consultaArticulos(condicion);
        else
        listaArticulos = articulos.consultaArticulos(campo,compara,condicion);
        vector = new Vector();

         for(Object o: listaArticulos){
             Articulos iarticulos = (Articulos)o;
             Vector<Object> unaFila = new Vector<Object>();
             unaFila.add(iarticulos.getCodigo());
             unaFila.add(iarticulos.getDescripcion());
             unaFila.add(df.format(iarticulos.getPrecioCompra()));
             unaFila.add(df.format(iarticulos.getUltimoCosto()));
             unaFila.add(df.format(iarticulos.getPrecioVenta()));
             unaFila.add(iarticulos.getExistencia());
             ivaArticulo = iarticulos.getIva();
          /*   int acumulado = 0;
             List<Almacendevoluciones> listadev = halmacendevoluciones.consultaPartidas("codigoArticulo", "=", iarticulos.getCodigo());
             int suma=0;
             while(suma<listadev.size())
             {
                 acumulado = acumulado + listadev.get(suma).getCantidad();
                 suma++;
             } */
             unaFila.add(iarticulos.getAlmacenDevoluciones());
             unaFila.add(iarticulos.getReservado());
             vector.add(unaFila);
         }
         
            dtm = new DefaultTableModel(vector,encabezadoArticulos) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };

           jTable1.setModel(dtm);
           jTable1.getColumn("Descripción").setPreferredWidth(400);
           jTable1.getSelectionModel().setSelectionInterval(0, 0);
           bandera = true; 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1 )
        {
        JOptionPane.showMessageDialog(null, "Por favor verifique que el artículo sobre el que busca hacer esta operación se encuentre seleccionado");
        return;
        }
        
        if(!bajarPartida)
        {
        JOptionPane.showMessageDialog(null, "Por favor de enter en los campos precio compra, descuento o cargos antes de bajar esta partida");
        return;            
        }
        
        
        if(jTable1.getModel().getRowCount()==0 || listaArticulos.isEmpty())
        {
            
            JOptionPane.showMessageDialog(null, "No ha seleccionado ningún artículo");
            return;
        }
        
        boolean banderaValidador = false;
        for(int i=0; i<listapr.size(); i++)
        {
            if(listapr.get(i).getArticulo().equals(listaArticulos.get(jTable1.getSelectedRow()).getCodigo()))
                banderaValidador=true;
        }
        
        if(banderaValidador)
        {
            JOptionPane.showMessageDialog(null, "Este código ya se encuentra en la lista de partidas");
           return; 
        }

      /*  bandera = false;
        Partidascomprasmayoreo pc = new Partidascomprasmayoreo();
        pc.setDescuento(Double.valueOf(jTextField5.getText()));
        double descarti = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());       
        pc.setDescuentoArti(Double.valueOf(jTextField7.getText()));
        pc.setPorcCargo(Integer.parseInt(jTextField3.getText()));
        double cargoarti = (Integer.parseInt(jTextField3.getText())/100) * Double.valueOf(jTextField4.getText());
        pc.setCargoArticulo(Double.valueOf(jTextField9.getText())); */
        
               Kardex ultimoRenglon = hkardex.consultaUltimoRenglon("articulo", "=", listaArticulos.get(jTable1.getSelectedRow()).getCodigo());
        
        if(ultimoRenglon.getUltimoCosto() > Double.valueOf(jTextField6.getText()))
        {
        VEleccionPCompra veleccionpcompra = new VEleccionPCompra((JFrame)Window.getWindows()[0],true);
        veleccionpcompra.setLocationRelativeTo(null);
        veleccionpcompra.setVisible(true);
        
        if(veleccionpcompra.isBandera())
        {
            if(veleccionpcompra.getEleccion() == 1)
            {
               jTextField8.setText(df.format(ultimoRenglon.getPrecioVenta()));
               porcostodesc = ultimoRenglon.getUltimoCosto();
               jTextField9.setText("-1");
            }
            else if(veleccionpcompra.getEleccion() == 2)
            {
               jTextField8.setText(df.format(veleccionpcompra.getPrecio()));
               jTextField9.setText("-1");                
            }
        }else
            return;
        }
        
        bandera = false;
        Partidascomprasmayoreo pc = new Partidascomprasmayoreo();
        pc.setDescuento(Double.valueOf(porcentajeDesc));
     //   double descarti = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());       
        pc.setDescuentoArti(descuento);
        pc.setPorcCargo(porcentajeCosto);
     //   double cargoarti = (Integer.parseInt(jTextField3.getText())/100) * Double.valueOf(jTextField4.getText());     
        pc.setCargoArticulo(cargos);
    /*    double porcostodesc = Double.valueOf(jTextField4.getText()) +cargoarti - descarti;
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        pc.setCascada(1);
        }else
        pc.setCascada(0); */           
        pc.setCascada(cascada);
        
        String cadenaCascada="SIN CASCADA";
        if(cascada==1)
        {
        cadenaCascada = "C "+proveedor.get(jComboBox3.getSelectedIndex()).getDesc1()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc2()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc3()+"+"+
                              proveedor.get(jComboBox3.getSelectedIndex()).getDesc4()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc5()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc6();   
        }    
        pc.setCadenaCascada(cadenaCascada);
        pc.setCostoDesc(porcostodesc);
        pc.setPrecioUni(Double.valueOf(jTextField4.getText())); 
        pc.setIva(listaArticulos.get(jTable1.getSelectedRow()).getIva());  
        pc.setArticulo(listaArticulos.get(jTable1.getSelectedRow()).getCodigo());
        pc.setCantidad(Integer.valueOf(jTextField2.getText()));
        pc.setSubtotal(Double.valueOf(pc.getCostoDesc()*pc.getCantidad()));
        pc.setMontoIva(pc.getSubtotal() * (pc.getIva().doubleValue() / 100));
        pc.setTotal(pc.getMontoIva() + pc.getSubtotal());
        
        pc.setPrecioCompra(Double.valueOf(jTextField4.getText()));
        pc.setUtilidad(Double.valueOf(jTextField9.getText()));
        pc.setStockMin(Integer.valueOf(jTextField10.getText()));
        pc.setStockMax(Integer.valueOf(jTextField11.getText()));
        
        // pc.setCompra(Long.valueOf(jTextField4.getText())); //poner id de la compra al final de la partida
                 
              
    

        
      /*  double cargo = 0;
        double descuento = 0;
        double importeConIva=Double.valueOf(jTextField8.getText());
        cargo = importeConIva * Double.valueOf(jTextField9.getText());
        descuento = importeConIva * (Double.valueOf(jTextField7.getText())/100);
        importeConIva = importeConIva + cargo - descuento;
        jTextField8.setText(df.format(importeConIva)); */
       // listaArticulos.get(jTable1.getSelectedRow()).setPrecioVenta(Double.valueOf(jTextField8.getText()));
        pc.setPrecioVenta(Double.valueOf(jTextField8.getText()));
        pc.setDescripcion(listaArticulos.get(jTable1.getSelectedRow()).getDescripcion());
        
        
       //  actualizarArticulos.add(listaArticulos.get(jTable1.getSelectedRow()));
                 
         listapr.add(pc);
        
            Vector<Object> unaFila = new Vector<Object>();
             unaFila.add(pc.getArticulo());
             unaFila.add(pc.getCantidad());
             unaFila.add(pc.getDescripcion());
             unaFila.add(String.valueOf(df.format(pc.getPrecioCompra())));          
             if(Integer.compare(pc.getCascada(), 0)==0)
             unaFila.add(pc.getDescuento());
             else
            /* unaFila.add("C "+proveedor.get(jComboBox3.getSelectedIndex()).getDesc1()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc2()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc3()+"+"+
                              proveedor.get(jComboBox3.getSelectedIndex()).getDesc4()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc5()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc6());    */
             unaFila.add(pc.getCadenaCascada());    
             unaFila.add(String.valueOf(df.format(pc.getDescuento())));
             unaFila.add(String.valueOf(df.format(pc.getCostoDesc())));
             unaFila.add(String.valueOf(df.format(pc.getSubtotal()))); 
             unaFila.add(String.valueOf(df.format(pc.getTotal())));
             unaFila.add(String.valueOf(df.format(pc.getPrecioVenta())));
             
            // unaFila.add(String.valueOf(df.format(pc.getDescuentoArti())));
            //  unaFila.add(String.valueOf(pc.getCascada()));
           //  unaFila.add(String.valueOf(df.format(pc.getCargoArticulo())));
           //  unaFila.add(String.valueOf(df.format(pc.getCostoDesc())));
             
           //  unaFila.add(String.valueOf(df.format(pc.getIva()))); 
           //  unaFila.add(String.valueOf(df.format(pc.getMontoIva()))); 
             
             
             
         //    if(String.valueOf(pc.getSubtotal()).length() > 7)
        //     unaFila.add(String.valueOf(pc.getSubtotal()).substring(0, 7));
       //      else
                             
       //      if(String.valueOf(pc.getTotal()).length() > 7)
       //      unaFila.add(String.valueOf(pc.getTotal()).substring(0, 7));
       //      else
                 
             vectorPartidas.add(unaFila);
             dtmPartidas = new DefaultTableModel(vectorPartidas,encabezadoPartidas) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };
            
              jTable2.setModel(dtmPartidas);
              int row =  jTable2.getRowCount () - 1;
              Rectangle rect = jTable2.getCellRect(row, 0, true);
              jTable2.scrollRectToVisible(rect);
              jTable2.clearSelection();
              jTable2.setRowSelectionInterval(row, row);
              jTable2.getColumn("Descripción").setPreferredWidth(270);
           
           
          subtotal =  subtotal + pc.getSubtotal();
          
          iva = iva + pc.getMontoIva();
          total = total + pc.getTotal();
          cantidadAr = cantidadAr + pc.getCantidad();
          
         
          jLabel33.setText(String.valueOf(cantidadAr));
          jLabel16.setText(String.valueOf(listapr.size()));
          jLabel18.setText(df.format(subtotal));
          jLabel24.setText(df.format(iva));
          jLabel26.setText(df.format(total));
          if(jCheckBox1.isSelected())
          jCheckBox1.setSelected(false);
          jButton12.setEnabled(true);
          jButton4.setEnabled(false);
          jButton8.setEnabled(false);
          jTextField2.setText("1");
          jTextField9.setText("0");
          bandera = true; 
          bajarPartida = false; 
           
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
          if(jTable2.getSelectedRow() == -1)
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero una fila");
            return;
        }
        if(jTable2.getSelectedRow() == -1 )
        {
        JOptionPane.showMessageDialog(null, "Por favor verifique que el artículo sobre el que busca hacer esta operación se encuentre seleccionado");
        return;
        }
              
        iva = iva - listapr.get(jTable2.getSelectedRow()).getMontoIva();
        subtotal = subtotal-listapr.get(jTable2.getSelectedRow()).getSubtotal();
        total = total - listapr.get(jTable2.getSelectedRow()).getTotal();
        cantidadAr = cantidadAr - listapr.get(jTable2.getSelectedRow()).getCantidad();
        
        
        jLabel18.setText(String.valueOf(df.format(subtotal)));    
        jLabel24.setText(String.valueOf(df.format(iva)));
        jLabel26.setText(String.valueOf(df.format(total)));
        jLabel33.setText(String.valueOf(cantidadAr));
  
        listapr.remove(jTable2.getSelectedRow());
//        actualizarArticulos.remove(jTable2.getSelectedRow());
        jLabel16.setText(String.valueOf(listapr.size()));
        dtmPartidas.removeRow(jTable2.getSelectedRow());
        dtmPartidas.fireTableDataChanged();
        jTable2.getColumn("Descripción").setPreferredWidth(270);
      /*     total = total - listapr.get(jTable2.getSelectedRow()).getTotal();
      
           jLabel26.setText(String.valueOf(df.format(total)));    
           
           if(jCheckBox2.isSelected())
           subtotal =  total/(1+CGlobalConfig.getIvaVenta());
           else
           subtotal = total; 
           
           if(jCheckBox2.isSelected())
           iva = total - subtotal;
           else
           iva = 0.0;       
           jLabel24.setText(String.valueOf(df.format(iva)));
           jLabel18.setText(String.valueOf(df.format(subtotal)));  */
          if(jCheckBox1.isSelected())
          jCheckBox1.setSelected(false);
          jTextField2.setText("1");
          jButton12.setEnabled(true);
          jButton4.setEnabled(false);
          jButton8.setEnabled(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try {        
        jButton4.setEnabled(false);
        
        if(compras.getCompra() == 1)
        {
        
       /* VPagoCompras vpc = new VPagoCompras((JFrame)Window.getWindows()[0],true);
        vpc.setLocationRelativeTo(null);
        vpc.setVisible(true);
               
        if(vpc.isConfirmacion())
        {
        compras.setFactura(jTextField18.getText());
        if(!proveedor.isEmpty())
        compras.setCodigoProveedor(proveedor.get(jComboBox3.getSelectedIndex()).getId());
        if(vpc.getOpcion()==0)
        {
        compras.setTipoPago("Efectivo");
        compras.setCheque(" ");
        compras.setBanco(" ");
        }
        else if(vpc.getOpcion()==1)    
        {
        compras.setTipoPago("Crédito");    
        compras.setCheque(" ");
        compras.setBanco(" ");        
        }
        else
        {
        compras.setTipoPago("Cheque");        
        compras.setCheque(vpc.getCheque());
        compras.setBanco(vpc.getBanco());
        }
        } */
            
        if(jComboBox3.getSelectedIndex()== -1)
        {
        JOptionPane.showMessageDialog(null, "Por favor asegurese de tener seleccionado un proveedor");    
        return;
        }
        
        boolean encontrado = hcompras.consultaComprasFactura(proveedor.get(jComboBox3.getSelectedIndex()).getId(),jTextField18.getText() );
        if(encontrado && !compras.getFactura().equals(jTextField18.getText()))
        {
            JOptionPane.showMessageDialog(null, "Ya existe una factura con este código y este proveedor");
            return;
        }
        
        if(!CPrincipal.getConexion().crearTransaccion())
        return;
        
        
        compras.setFactura(jTextField18.getText());
        compras.setCodigoProveedor(proveedor.get(jComboBox3.getSelectedIndex()).getId());
        compras.setNombreProveedor(proveedor.get(jComboBox3.getSelectedIndex()).getNombre());
        hcompras.actualizarComprasLast(compras, "id", "=", String.valueOf(compras.getId()));
        
        if(compras.getTipoPago().equals("Crédito"))
        {
        hCuentasPorPagar hcpp = new hCuentasPorPagar();
        List<Cuentasporpagar> cuentas=hcpp.consultaCuentasPorPagar("compra", "=", String.valueOf(compras.getId()));
        if(!cuentas.isEmpty())
        {
        cuentas.get(0).setProveedor(compras.getCodigoProveedor());    
        hcpp.actualizarCuentasPorPagar(cuentas.get(0), "id", "=", String.valueOf(cuentas.get(0).getId()));    
        }
        }
        CPrincipal.getConexion().finalizarTransaccion();
        JOptionPane.showMessageDialog(null, "Datos actualizados!");
            return;
        }
        
        
        if(listapr.size()==0)
        {
            JOptionPane.showMessageDialog(null, "No hay partidas que guardar");
            return;
        }
        
        if(jTextField18.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor capture el número de factura");
            return;
        }
        
        boolean encontrado = hcompras.consultaComprasFactura(compras.getCodigoProveedor(),jTextField18.getText() );
        if(encontrado && !compras.getFactura().equals(jTextField18.getText()))
        {
            JOptionPane.showMessageDialog(null, "Ya existe una factura con este código y este proveedor");
            return;
        }
        
        long comprada= hcompras.consultaComprasComprada(compras.getId());
        if(Long.compare(comprada, (long)1)==0)
        {
            JOptionPane.showMessageDialog(null, "Esta compra ya fue realizada");
            return;
        }
        
         if(Long.compare(comprada, -1)==0)
        {
            JOptionPane.showMessageDialog(null, "Esta compra no existe");
            return;
        }
                
        
        VPagoCompras vpc = new VPagoCompras((JFrame)Window.getWindows()[0],true);
        vpc.setLocationRelativeTo(null);
        vpc.setVisible(true);
               
        if(vpc.isConfirmacion())
        {
            
        ConexionWeb conexionweb = new ConexionWeb();
        String transaccion="";    
            
        if(!CPrincipal.getConexion().crearTransaccion())
        return;     
        
        if(CGlobalConfig.isWeb())
        transaccion = conexionweb.iniciarTransaccion()+ " ";
            
        ComprasMayoreo comprafinal = new ComprasMayoreo();    
        if(vpc.getOpcion()==0)
        {
        comprafinal.setTipoPago("Efectivo");
        comprafinal.setCheque(" ");
        comprafinal.setBanco(" ");
        comprafinal.setTn(vpc.getTn());
        }
        else if(vpc.getOpcion()==1)    
        {
        comprafinal.setTipoPago("Crédito");    
        comprafinal.setCheque(" ");
        comprafinal.setBanco(" ");        
        comprafinal.setTn(vpc.getTn());
        }
        else if(vpc.getOpcion()==2)
        {
        comprafinal.setTipoPago("Crédito");        
        comprafinal.setCheque(vpc.getCheque());
        comprafinal.setBanco(vpc.getBanco());
        comprafinal.setTn(vpc.getTn());
        } else if(vpc.getOpcion()==3)
        {
        comprafinal.setTipoPago("Efectivo");
        comprafinal.setCheque(" ");
        comprafinal.setBanco(" ");        
        comprafinal.setTn(vpc.getTn());
        }
            
        
        comprafinal.setCargos(Double.valueOf(jTextField15.getText()));    
        comprafinal.setCodigoPedido((long)0);
        comprafinal.setCodigoProveedor(proveedor.get(jComboBox3.getSelectedIndex()).getId());
        comprafinal.setCompra(1);
        comprafinal.setDescAdic(String.valueOf(desadi));
        comprafinal.setDevolucion(0);
        comprafinal.setDiasCred(proveedor.get(jComboBox3.getSelectedIndex()).getDiasCredito());
        comprafinal.setImporte(total);
        comprafinal.setNumRefComp(jTextField12.getText());
        comprafinal.setFechaCompra(hcompras.generarFecha());
        comprafinal.setPedido(0);
        comprafinal.setObservacion(jTextField16.getText());
        comprafinal.setFactura(jTextField18.getText());
        comprafinal.setIdUsuario(String.valueOf(CConfiguracion.getId()));
        
        int cantidadArticulo=0;
        for(int i=0; i<listapr.size();i++)
        {
            cantidadArticulo = cantidadArticulo + listapr.get(i).getCantidad();
            publicarParaRed.add(listapr.get(i).getDescripcion());
        }
        
        comprafinal.setCantidadArticulos(String.valueOf(cantidadArticulo));
        
        
        if(!CGlobalConfig.isWeb())
        hcompras.actualizarComprasLast(comprafinal, "id", "=", String.valueOf(compras.getId()) );
        else
        transaccion = transaccion + hcompras.crearQueryActualizarComprasLast(comprafinal, "id", "=", String.valueOf(compras.getId()))  + " ";    
        
        if(comprafinal.getTipoPago().equals("Crédito"))
        {
                     final String OLD_FORMAT2 = "dd/MM/yy";
                     final String NEW_FORMAT2 = "yyyy/MM/dd";

                     // August 12, 2010
                     String oldDateString2 = dateChooserCombo1.getText();
                     String newDateString2;

                     SimpleDateFormat sdf2 = new SimpleDateFormat(OLD_FORMAT2);
                     Date d2 = null;
                      try {
                     d2 = sdf2.parse(oldDateString2);
                     } catch (ParseException ex) {
                     Logger.getLogger(VCatalogoCierres.class.getName()).log(Level.SEVERE, null, ex);
                      }
                     sdf2.applyPattern(NEW_FORMAT2);
                     newDateString2 = sdf2.format(d2);
                     newDateString2 = newDateString2 + " 00:00:00";    
            
        hCuentasPorPagar hcp = new hCuentasPorPagar();
        Cuentasporpagar cpp = new Cuentasporpagar();
        cpp.setCompra(compras.getId());
        if(vpc.getOpcion()==1)
        {
        cpp.setContraRecibo("0");
        cpp.setTn("SIN TN");
        }
        else
        {
        cpp.setContraRecibo(comprafinal.getCheque());    
        cpp.setTn(vpc.getTn());
        }
        cpp.setObservacion(jTextField16.getText());
        cpp.setPagado(0);
        cpp.setSaldo(total); 
        cpp.setProveedor(compras.getCodigoProveedor());
        cpp.setFechaExpiracion(newDateString2);
        
        if(!CGlobalConfig.isWeb())
        hcp.guardarCuentasPorPagar(cpp);
        else
        transaccion = transaccion + hcp.crearQueryguardarCuentasPorPagar(cpp)  + " ";        
        }
        
        List<Partidascomprasmayoreo> listatemporal = new ArrayList<Partidascomprasmayoreo>();
        /* listapr.get(indparti).setCompra((long)numcompra);
        hpartidascompras.guardarPCompras(listapr.get(indparti)); */
        
        
        
        if(listapr.size() >= respaldopr.size())
        {
       for(int e=0; e<listapr.size(); e++)
        {
            listatemporal.add(listapr.get(e));
        }    
          int i = 0;     
           while(i<listatemporal.size())
           {  
          int indrespaldo=0;
          while(indrespaldo<respaldopr.size())
          {
              if(listatemporal.get(i).getArticulo().equals(respaldopr.get(indrespaldo).getArticulo()) &&
              Integer.compare(listatemporal.get(i).getCantidad(),respaldopr.get(indrespaldo).getCantidad()) == 0 &&
              Double.compare(listatemporal.get(i).getPrecioVenta(),respaldopr.get(indrespaldo).getPrecioVenta())==0
              && Long.compare(listatemporal.get(i).getId(),respaldopr.get(indrespaldo).getId())==0     
              )    
              /* if(listapr.get(i).getArticulo().equals(respaldopr.get(indrespaldo).getArticulo()) &&
              listapr.get(i).getCantidad() == respaldopr.get(indrespaldo).getCantidad() &&
              listapr.get(i).getPrecioVenta() == respaldopr.get(indrespaldo).getPrecioVenta()
              && listapr.get(i).getId() == respaldopr.get(indrespaldo).getId()    
              )  */     
           {      
               
               
           kardex = hkardex.consultaUltimoRenglon("articulo", "=", listatemporal.get(i).getArticulo());
           
           if(kardex == null)
           {
                    //Se registra la pieza en Kardex
                    List<Articulos> tempArticulos = articulos.consultaArticulos("codigo", "=", listatemporal.get(i).getArticulo());
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(tempArticulos.get(0).getAnticipos());
                    kardex.setArticulo(tempArticulos.get(0).getCodigo());
                    kardex.setEntrada(0);
                    kardex.setExistencias((int)tempArticulos.get(0).getExistencia());
                    kardex.setIdArticulo(tempArticulos.get(0).getId());
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(tempArticulos.get(0).getPrecioVenta());
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados((int)tempArticulos.get(0).getReservado());
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(tempArticulos.get(0).getUltimoCosto());
                    kardex.setVendidoEn(0.0);
                    
                    if(!CGlobalConfig.isWeb())
                    hkardex.guardarEnKardex(kardex); 
                    else
                    transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(kardex)  + " ";    
           }
           
        listaArticulos = articulos.consultaArticulos("codigo", "=", listatemporal.get(i).getArticulo());
        
        listaArticulos.get(0).setUltimoCosto(listatemporal.get(i).getPrecioUni());
        listaArticulos.get(0).setPrecioCompra(listatemporal.get(i).getCostoDesc());
        listaArticulos.get(0).setExistencia(listaArticulos.get(0).getExistencia()+listatemporal.get(i).getCantidad());
        listaArticulos.get(0).setPrecioVenta(listatemporal.get(i).getPrecioVenta());
        listaArticulos.get(0).setMinimoPzas(listatemporal.get(i).getStockMin());
        listaArticulos.get(0).setMaximoPzas(listatemporal.get(i).getStockMax());
        double promedio = (listaArticulos.get(0).getMinimoPzas() + listaArticulos.get(0).getMaximoPzas()) / 2;
        listaArticulos.get(0).setPromPzas((long)promedio);
        
         if(!CGlobalConfig.isWeb())
        articulos.actualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId())); 
        else
        transaccion = transaccion + articulos.crearQueryActualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId()))  + " ";         
           
           Kardex renglon = new Kardex();  
           
           int cantidadKardex = kardex.getExistencias() + listatemporal.get(i).getCantidad();
           renglon.setNoMov(String.valueOf(Long.valueOf(kardex.getNoMov())+1));
           renglon.setReservados(kardex.getReservados());
           renglon.setAnticipos(kardex.getAnticipos());
           renglon.setExistencias(cantidadKardex);
           renglon.setArticulo(kardex.getArticulo());
           renglon.setIdArticulo(kardex.getIdArticulo());
           renglon.setAlmacenista("");
           renglon.setEntrada(listatemporal.get(i).getCantidad());
           renglon.setModificacion("Compra con Referencia "+jTextField12.getText());
           renglon.setMovimiento("Pedido "+compras.getId());
           renglon.setPrecioVenta(listatemporal.get(i).getPrecioVenta());
           renglon.setRefFerrari("Compra "+jTextField18.getText()+" a "+proveedor.get(jComboBox3.getSelectedIndex()).getNombre());
           renglon.setResponsable(String.valueOf(CConfiguracion.getId()));
           renglon.setSalida(0);
           renglon.setUltimoCosto(listatemporal.get(i).getCostoDesc());
           renglon.setResponsable2(CConfiguracion.getNombres()+" "+CConfiguracion.getApellidoP()+" "+CConfiguracion.getApellidoM());
           renglon.setVendidoEn(0.00);
           if(!CGlobalConfig.isWeb())
           hkardex.guardarEnKardex(renglon);
           else
           transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(renglon) + " ";    
               
           for(int u=0; u<listapr.size(); u++)
               {
              if(listatemporal.get(i).getArticulo().equals(listapr.get(indrespaldo).getArticulo()) &&
              Integer.compare(listatemporal.get(i).getCantidad(),listapr.get(indrespaldo).getCantidad()) == 0 &&
              Double.compare(listatemporal.get(i).getPrecioVenta(),listapr.get(indrespaldo).getPrecioVenta())==0
              && Long.compare(listatemporal.get(i).getId(),listapr.get(indrespaldo).getId())==0     
              )   
                   listapr.remove(u);    
               }
               respaldopr.remove(indrespaldo);
               
           }
            indrespaldo++;
          }
              i++;    
           }
           
        }else
        {
        for(int e=0; e<respaldopr.size(); e++)
        {
            listatemporal.add(respaldopr.get(e));
        }      
            
          int i = 0;     
           while(i<listatemporal.size())
           {
          int indrespaldo=0;
          while(indrespaldo<listapr.size())
          {
             /* if(listapr.get(indrespaldo).getArticulo().equals(respaldopr.get(i).getArticulo()) &&
              Integer.compare(listapr.get(indrespaldo).getCantidad(),respaldopr.get(i).getCantidad()) == 0 &&
              Double.compare(listapr.get(indrespaldo).getPrecioVenta(),respaldopr.get(i).getPrecioVenta())==0
              && Long.compare(listapr.get(indrespaldo).getId(),respaldopr.get(i).getId())==0     
              ) */   
              if(listapr.get(indrespaldo).getArticulo().equals(listatemporal.get(i).getArticulo()) &&
              listapr.get(indrespaldo).getCantidad() == listatemporal.get(i).getCantidad() &&
              listapr.get(indrespaldo).getPrecioVenta() == listatemporal.get(i).getPrecioVenta() &&
              listapr.get(indrespaldo).getId() == listatemporal.get(i).getId()     
              )   
           {
               
          kardex = hkardex.consultaUltimoRenglon("articulo", "=", listapr.get(indrespaldo).getArticulo());
           
           if(kardex == null)
           {
                    //Se registra la pieza en Kardex
                    List<Articulos> tempArticulos = articulos.consultaArticulos("codigo", "=", listapr.get(indrespaldo).getArticulo());
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(tempArticulos.get(0).getAnticipos());
                    kardex.setArticulo(tempArticulos.get(0).getCodigo());
                    kardex.setEntrada(0);
                    kardex.setExistencias((int)tempArticulos.get(0).getExistencia());
                    kardex.setIdArticulo(tempArticulos.get(0).getId());
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(tempArticulos.get(0).getPrecioVenta());
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados((int)tempArticulos.get(0).getReservado());
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(tempArticulos.get(0).getUltimoCosto());
                    kardex.setVendidoEn(0.0);
                    
                   if(!CGlobalConfig.isWeb())
                    hkardex.guardarEnKardex(kardex); 
                    else
                    transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(kardex)  + " ";  
           }       
               
               
        listaArticulos = articulos.consultaArticulos("codigo", "=", listapr.get(indrespaldo).getArticulo());     
        listaArticulos.get(0).setUltimoCosto(listapr.get(indrespaldo).getPrecioUni());
        listaArticulos.get(0).setPrecioCompra(listapr.get(indrespaldo).getCostoDesc());
        listaArticulos.get(0).setExistencia(listaArticulos.get(0).getExistencia()+listapr.get(indrespaldo).getCantidad());
        listaArticulos.get(0).setPrecioVenta(listapr.get(indrespaldo).getPrecioVenta());
        listaArticulos.get(jTable1.getSelectedRow()).setMinimoPzas(listapr.get(indrespaldo).getStockMin());
        listaArticulos.get(jTable1.getSelectedRow()).setMaximoPzas(listapr.get(indrespaldo).getStockMax());
        double promedio = (listaArticulos.get(jTable1.getSelectedRow()).getMinimoPzas() + listaArticulos.get(jTable1.getSelectedRow()).getMaximoPzas()) / 2;
        listaArticulos.get(jTable1.getSelectedRow()).setPromPzas((long)promedio);
        
        if(!CGlobalConfig.isWeb())
        articulos.actualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId())); 
        else
        transaccion = transaccion + articulos.crearQueryActualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId()))  + " ";         
           
               
      /*     kardex = hkardex.consultaUltimoRenglon("articulo", "=", listapr.get(indrespaldo).getArticulo());
           
           if(kardex == null)
           {
                    //Se registra la pieza en Kardex
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(listaArticulos.get(0).getAnticipos());
                    kardex.setArticulo(listaArticulos.get(0).getCodigo());
                    kardex.setEntrada(0);
                    kardex.setExistencias((int)listaArticulos.get(0).getExistencia());
                    kardex.setIdArticulo(listaArticulos.get(0).getId());
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(listaArticulos.get(0).getPrecioVenta());
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados((int)listaArticulos.get(0).getReservado());
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(listaArticulos.get(0).getUltimoCosto());
                    kardex.setVendidoEn(0.0);
                    
                    hkardex.guardarEnKardex(kardex); 
           } */
           
           Kardex renglon = new Kardex();
           
           int cantidadKardex = kardex.getExistencias() + listapr.get(indrespaldo).getCantidad();
           renglon.setNoMov(String.valueOf(Long.valueOf(kardex.getNoMov())+1));
           renglon.setReservados(kardex.getReservados());
           renglon.setAnticipos(kardex.getAnticipos());
           renglon.setArticulo(kardex.getArticulo());
           renglon.setIdArticulo(kardex.getIdArticulo());
           renglon.setExistencias(cantidadKardex);
           renglon.setAlmacenista("");
           renglon.setEntrada(listapr.get(indrespaldo).getCantidad());
           renglon.setModificacion("Compra con Referencia "+jTextField12.getText());
           renglon.setMovimiento("Pedido "+compras.getId());
           renglon.setPrecioVenta(listapr.get(indrespaldo).getPrecioVenta());
           renglon.setRefFerrari("Compra "+jTextField18.getText()+" a "+proveedor.get(jComboBox3.getSelectedIndex()).getNombre());
           renglon.setResponsable(String.valueOf(CConfiguracion.getId()));
           renglon.setSalida(0);
           renglon.setUltimoCosto(listapr.get(indrespaldo).getCostoDesc());
           renglon.setResponsable2(CConfiguracion.getNombres()+" "+CConfiguracion.getApellidoP()+" "+CConfiguracion.getApellidoM());
           renglon.setVendidoEn(0.00);
           
           if(!CGlobalConfig.isWeb())
           hkardex.guardarEnKardex(renglon);
           else
           transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(renglon) + " ";    
                  
           listapr.remove(indrespaldo);
               
               for(int u=0; u<respaldopr.size(); u++)
               {
              if(respaldopr.get(indrespaldo).getArticulo().equals(listatemporal.get(i).getArticulo()) &&
              respaldopr.get(indrespaldo).getCantidad() == listatemporal.get(i).getCantidad() &&
              respaldopr.get(indrespaldo).getPrecioVenta() == listatemporal.get(i).getPrecioVenta() &&
              respaldopr.get(indrespaldo).getId() == listatemporal.get(i).getId()     
              )   
                   respaldopr.remove(u);    
               }
               
           }
            indrespaldo++;
          }
          i++;
           } 
        }
        
           
                
        int eliminarp = 0;
        while(eliminarp < respaldopr.size())
        {
            if(!CGlobalConfig.isWeb())
            hpartidascompras.borrarPCompras("id", "=", String.valueOf(respaldopr.get(eliminarp).getId()));
            else
            transaccion = transaccion + hpartidascompras.crearQueryborrarPCompras("id", "=", String.valueOf(respaldopr.get(eliminarp).getId())) + " ";
            
            eliminarp++;
        }
        
        int indparti=0;
        while(indparti<listapr.size())
        {
            
        listapr.get(indparti).setCompra(compras.getId());
        
        
        if(!CGlobalConfig.isWeb())
        hpartidascompras.guardarPCompras(listapr.get(indparti)); 
        else
        transaccion = transaccion + hpartidascompras.crearQueryPCompras(listapr.get(indparti)) + " ";
        
        
           kardex = hkardex.consultaUltimoRenglon("articulo", "=", listapr.get(indparti).getArticulo());
           
           if(kardex == null)
           {
                    //Se registra la pieza en Kardex
                    List<Articulos> tempArticulos = articulos.consultaArticulos("codigo", "=", listapr.get(indparti).getArticulo());
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(tempArticulos.get(0).getAnticipos());
                    kardex.setArticulo(tempArticulos.get(0).getCodigo());
                    kardex.setEntrada(0);
                    kardex.setExistencias((int)tempArticulos.get(0).getExistencia());
                    kardex.setIdArticulo(tempArticulos.get(0).getId());
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(tempArticulos.get(0).getPrecioVenta());
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados((int)tempArticulos.get(0).getReservado());
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(tempArticulos.get(0).getUltimoCosto());
                    kardex.setVendidoEn(0.0);
                    
                     if(!CGlobalConfig.isWeb())
                    hkardex.guardarEnKardex(kardex); 
                    else
                    transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(kardex)  + " ";  
           }
            
        listaArticulos = articulos.consultaArticulos("codigo", "=", listapr.get(indparti).getArticulo());
        
        listaArticulos.get(0).setUltimoCosto(listapr.get(indparti).getPrecioUni());
        listaArticulos.get(0).setPrecioCompra(listapr.get(indparti).getCostoDesc());
        listaArticulos.get(0).setExistencia(listaArticulos.get(0).getExistencia()+listapr.get(indparti).getCantidad());
        listaArticulos.get(0).setPrecioVenta(listapr.get(indparti).getPrecioVenta());
        listaArticulos.get(0).setMinimoPzas(listapr.get(indparti).getStockMin());
        listaArticulos.get(0).setMaximoPzas(listapr.get(indparti).getStockMax());
        double promedio = (listaArticulos.get(0).getMinimoPzas() + listaArticulos.get(0).getMaximoPzas()) / 2;
        listaArticulos.get(0).setPromPzas((long)promedio);
              
         if(!CGlobalConfig.isWeb())
        articulos.actualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId())); 
        else
        transaccion = transaccion + articulos.crearQueryActualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId()))  + " ";         
           
        
          //  articulos.actualizarArticulos(actualizarArticulos.get(indparti), "Id", "=", String.valueOf(actualizarArticulos.get(indparti).getId()));              
   /*        kardex = hkardex.consultaUltimoRenglon("articulo", "=", listapr.get(indparti).getArticulo());
           
           
           if(kardex == null)
           {
                    //Se registra la pieza en Kardex
                    kardex = new Kardex();
                    kardex.setAlmacenista("");
                    kardex.setAnticipos(listaArticulos.get(0).getAnticipos());
                    kardex.setArticulo(listaArticulos.get(0).getCodigo());
                    kardex.setEntrada(0);
                    kardex.setExistencias((int)listaArticulos.get(0).getExistencia());
                    kardex.setIdArticulo(listaArticulos.get(0).getId());
                    kardex.setModificacion("Registro");
                    kardex.setMovimiento("Registro de Artículo");
                    kardex.setNoMov("1");
                    kardex.setPrecioVenta(listaArticulos.get(0).getPrecioVenta());
                    kardex.setRefFerrari("Registro");
                    kardex.setReservados((int)listaArticulos.get(0).getReservado());
                    kardex.setResponsable("1");
                    kardex.setResponsable2("Registro Automático");
                    kardex.setSalida(0);
                    kardex.setUltimoCosto(listaArticulos.get(0).getUltimoCosto());
                    kardex.setVendidoEn(0.0);
                    
                    hkardex.guardarEnKardex(kardex); 
           } */

           Kardex renglon = new Kardex();          
           
           int cantidadKardex = kardex.getExistencias() + listapr.get(indparti).getCantidad();
           renglon.setNoMov(String.valueOf(Long.valueOf(kardex.getNoMov())+1));
           renglon.setReservados(kardex.getReservados());
           renglon.setArticulo(kardex.getArticulo());
           renglon.setIdArticulo(kardex.getIdArticulo());
           renglon.setAnticipos(kardex.getAnticipos());
           renglon.setExistencias(cantidadKardex);
           renglon.setAlmacenista("");
           renglon.setEntrada(listapr.get(indparti).getCantidad());
           renglon.setModificacion("Compra con Referencia "+jTextField12.getText());
           renglon.setMovimiento("Pedido "+compras.getId());
           renglon.setPrecioVenta(listapr.get(indparti).getPrecioVenta());
           renglon.setRefFerrari("Compra "+jTextField18.getText()+" a "+proveedor.get(jComboBox3.getSelectedIndex()).getNombre());
           renglon.setResponsable(String.valueOf(CConfiguracion.getId()));
           renglon.setSalida(0);
           renglon.setUltimoCosto(listapr.get(indparti).getCostoDesc());
           renglon.setResponsable2(CConfiguracion.getNombres()+" "+CConfiguracion.getApellidoP()+" "+CConfiguracion.getApellidoM());
           renglon.setVendidoEn(0.00);
                     
             if(!CGlobalConfig.isWeb())
           hkardex.guardarEnKardex(renglon);
           else
           transaccion = transaccion + hkardex.crearQueryGuardarEnKardexCompleto(renglon) + " "; 
            
            indparti++;
        }
        
        CPrincipal.getConexion().finalizarTransaccion();
        
        if(CGlobalConfig.isWeb())
               {
               transaccion = transaccion + conexionweb.finalizarTransaccion();    
               conexionweb.escribirEnWeb(transaccion);
               }
        
        try
        {
        VCatalogo_Articulos.boton1.doClick();
        VCatalogo_Pedidos.boton1.doClick();
        }catch(NullPointerException e)
        {
         System.out.println("El catálogo de artículos estaba cerrado :)");   
        }
        
        
        JOptionPane.showMessageDialog(null,"Compra Actualizada con Folio "+compras.getId());
        
        
         if(CGlobalConfig.isHabilitarRed())
            {
            int elige = JOptionPane.showOptionDialog(null, "¿Desea publicar las partidas compradas en la Red Quimera?","Publicar en Red Quimera",
                    JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);
            
            if(elige == JOptionPane.YES_OPTION)
             {
            ConexionWeb conexionWEB = new ConexionWeb();
            String crearCadena = "HA ADQUIRIDO: </br>";
            for(int io=0; io<publicarParaRed.size(); io++)
            {
                crearCadena = crearCadena + " "+publicarParaRed.get(io) + "</br>";
            }
            //Formatear Cadena
            crearCadena.replace("á", "&aacute");
            crearCadena.replace("é", "&eacute");
            crearCadena.replace("í", "&iacute");
            crearCadena.replace("ó", "&oacute");
            crearCadena.replace("ú", "&uacute");
            crearCadena.replace("Á", "&Aacute");
            crearCadena.replace("É", "&Eacute");
            crearCadena.replace("Í", "&Iacute");
            crearCadena.replace("Ó", "&Oacute");
            crearCadena.replace("Ú", "&Uacute");
            
            conexionWEB.publicarEnRed(crearCadena);
            JOptionPane.showMessageDialog(null, "Artículos Publicados");
             }
            
            }
        
        
        
        
        
        limpiar();
        }
         } catch(Exception e)
        {
            CPrincipal.getConexion().cancelarTransaccion();
            e.printStackTrace();            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void limpiar()
    {
        
        listapr.clear();
        listaArticulos.clear();
        jComboBox1.setSelectedIndex(0);
        jComboBox2.setSelectedIndex(0);
        jTextField1.setText("");
        jComboBox3.setSelectedIndex(0);
        jTextField12.setText("0");
        vector.removeAllElements();
        dtm.fireTableDataChanged();
        jTextField2.setText("1");
        jTextField3.setText("0");
        jTextField4.setText("0");
        jTextField5.setText("0");
        jTextField10.setText("0");
        jTextField11.setText("0");
        jTextField7.setText("0");
        jTextField8.setText("0");
        jTextField9.setText("0");
        vectorPartidas.removeAllElements();
        dtmPartidas.fireTableDataChanged();
        jLabel16.setText("0000");
        jLabel18.setText("0000.00");
        jLabel24.setText("0000");
        jLabel26.setText("0000.00");
        jLabel33.setText("0000");
        jTextField13.setText("0.0");
        jTextField14.setText("0");
        jTextField15.setText("0.0");
        jTextField16.setText("");
        jTextField18.setText("");
        
        subtotal=0.00;
        iva=0.0;
        total = 0.0;
        desadi = 0.0;

    }
    
    
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        double totalnuevo = Double.valueOf(jLabel18.getText()) + Double.valueOf(jTextField15.getText()) - Double.valueOf(jTextField13.getText()) -
                            (Double.valueOf(jLabel18.getText()) * Double.valueOf(jTextField14.getText())/100);  
        
        desadi = (Double.valueOf(jLabel18.getText()) * Double.valueOf(jTextField14.getText())) + Double.valueOf(jTextField13.getText());
        
        subtotal = totalnuevo;
     //   if(String.valueOf(total).length() > 7)
     //      jLabel26.setText(String.valueOf(total).substring(0, 7));
     //      else
           jLabel18.setText(String.valueOf(subtotal));
           
           iva = subtotal * CGlobalConfig.getIvaVenta();
    //       if(String.valueOf(iva).length() > 7)
    //       jLabel24.setText(String.valueOf(iva).substring(0, 7));
    //       else
           jLabel24.setText(String.valueOf(iva));
    
           total = subtotal + iva;
  //         if(String.valueOf(total).length() > 7)
  //         jLabel26.setText(String.valueOf(total).substring(0, 7));
  //         else
           jLabel26.setText(String.valueOf(total));
        
        jTextField13.setEditable(false);
        jTextField14.setEditable(false);
        jTextField15.setEditable(false);
        jButton6.setEnabled(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        
        if(jTable2.getSelectedRow() == -1 )
        {
        JOptionPane.showMessageDialog(null, "Por favor verifique que el artículo sobre el que busca hacer esta operación se encuentre seleccionado");
        return;
        }
        
        total = total - listapr.get(jTable2.getSelectedRow()).getTotal();
        iva = iva - listapr.get(jTable2.getSelectedRow()).getIva();
        subtotal = subtotal - listapr.get(jTable2.getSelectedRow()).getSubtotal();
       
        
          Kardex ultimoRenglon = hkardex.consultaUltimoRenglon("articulo", "=", listaArticulos.get(jTable1.getSelectedRow()).getCodigo());
        
        if(ultimoRenglon.getPrecioVenta() > Double.valueOf(jTextField8.getText()))
        {
        VEleccionPCompra veleccionpcompra = new VEleccionPCompra((JFrame)Window.getWindows()[0],true);
        veleccionpcompra.setLocationRelativeTo(null);
        veleccionpcompra.setVisible(true);
        
        if(veleccionpcompra.isBandera())
        {
            if(veleccionpcompra.getEleccion() == 1)
            {
               jTextField8.setText(df.format(ultimoRenglon.getPrecioVenta()));
               jTextField9.setText("-1");
            }
            else if(veleccionpcompra.getEleccion() == 2)
            {
               jTextField8.setText(df.format(veleccionpcompra.getPrecio()));
               jTextField9.setText("-1");                
            }
        }else
            return;
        }
        
        bandera = false;
        Partidascomprasmayoreo pc = new Partidascomprasmayoreo();
        
         pc.setDescuento(Double.valueOf(porcentajeDesc));
     //   double descarti = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());       
        
        pc.setDescuentoArti(descuento);
        
        
        pc.setPorcCargo(porcentajeCosto);
     //   double cargoarti = (Integer.parseInt(jTextField3.getText())/100) * Double.valueOf(jTextField4.getText());
                
        pc.setCargoArticulo(cargos);
        
        // double porcostodesc = Double.valueOf(jTextField4.getText()) +cargoarti - descarti;
    /*    if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        pc.setCascada(1);
        }else
        pc.setCascada(0);     */       
        
        pc.setCascada(cascada);
        
        String cadenaCascada="SIN CASCADA";
        if(cascada==1)
        {
        cadenaCascada = "C "+proveedor.get(jComboBox3.getSelectedIndex()).getDesc1()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc2()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc3()+"+"+
                              proveedor.get(jComboBox3.getSelectedIndex()).getDesc4()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc5()+"+"+proveedor.get(jComboBox3.getSelectedIndex()).getDesc6();   
        } 
        
        pc.setCadenaCascada(cadenaCascada);
        pc.setCostoDesc(porcostodesc);
        pc.setPrecioUni(Double.valueOf(jTextField4.getText())); 
        
        pc.setCantidad(Integer.valueOf(jTextField2.getText()));
        pc.setSubtotal(Double.valueOf(pc.getCostoDesc()*pc.getCantidad()));
        pc.setCompra(compras.getId());
        pc.setPrecioCompra(Double.valueOf(jTextField4.getText()));
        pc.setUtilidad(Double.valueOf(jTextField9.getText()));
        pc.setStockMin(Integer.valueOf(jTextField10.getText()));
        pc.setStockMax(Integer.valueOf(jTextField11.getText()));
        pc.setArticulo(listapr.get(jTable2.getSelectedRow()).getArticulo());
        pc.setDevuelta(0);
        // pc.setCompra(Long.valueOf(jTextField4.getText())); //poner id de la compra al final de la partida
                 
      /*  double cargo = 0;
        double descuento = 0;
        double importeConIva=Double.valueOf(jTextField8.getText());
        cargo = importeConIva * Double.valueOf(jTextField9.getText());
        descuento = importeConIva * (Double.valueOf(jTextField7.getText())/100);
        importeConIva = importeConIva + cargo - descuento; */
        // jTextField8.setText(df.format(importeConIva));
        
     /*   double utilidad = 0;
        double descuentoVenta = 0;
        importeConIva=Double.valueOf(jTextField6.getText());
        utilidad = importeConIva * ((Double.valueOf(jTextField9.getText() )/100));
        descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));
        importeConIva = importeConIva + utilidad - descuentoVenta;
        jTextField8.setText(df.format(importeConIva)); */
        
        listaArticulos = articulos.consultaArticulos("codigo", "=", pc.getArticulo());
        pc.setPrecioVenta(Double.valueOf(jTextField8.getText()));    
        pc.setDescripcion(listaArticulos.get(0).getDescripcion());
        
         
        
      /*  listaArticulos.get(0).setMinimoPzas(Long.valueOf(jTextField10.getText()));
        listaArticulos.get(0).setMaximoPzas(Long.valueOf(jTextField11.getText()));
        double promedio = (Double.valueOf(jTextField11.getText()) + Double.valueOf(jTextField11.getText())) / 2;
        listaArticulos.get(0).setPromPzas((long)promedio);

        
        articulos.actualizarArticulos(listaArticulos.get(0), "id", "=", String.valueOf(listaArticulos.get(0).getId()));*/
        pc.setIva(listaArticulos.get(0).getIva());  
        pc.setMontoIva(pc.getSubtotal() * (pc.getIva().doubleValue() / 100));
        pc.setTotal(pc.getMontoIva() + pc.getSubtotal());
       

        
        listapr.get(jTable2.getSelectedRow()).setCantidad(pc.getCantidad());
        listapr.get(jTable2.getSelectedRow()).setCargoArticulo(pc.getCargoArticulo());
        listapr.get(jTable2.getSelectedRow()).setCascada(pc.getCascada());
        listapr.get(jTable2.getSelectedRow()).setCompra(pc.getCompra());
        listapr.get(jTable2.getSelectedRow()).setCostoDesc(pc.getCostoDesc());
        listapr.get(jTable2.getSelectedRow()).setDescripcion(pc.getDescripcion());
        listapr.get(jTable2.getSelectedRow()).setDescuento(pc.getDescuento());
        listapr.get(jTable2.getSelectedRow()).setDescuentoArti(pc.getDescuentoArti());
        listapr.get(jTable2.getSelectedRow()).setDevuelta(pc.getDevuelta());
        listapr.get(jTable2.getSelectedRow()).setIva(pc.getIva());
        listapr.get(jTable2.getSelectedRow()).setMontoIva(pc.getMontoIva());
        listapr.get(jTable2.getSelectedRow()).setPorcCargo(pc.getPorcCargo());
        listapr.get(jTable2.getSelectedRow()).setPrecioCompra(pc.getPrecioCompra());
        listapr.get(jTable2.getSelectedRow()).setPrecioVenta(pc.getPrecioVenta());
        listapr.get(jTable2.getSelectedRow()).setStockMax(pc.getStockMax());
        listapr.get(jTable2.getSelectedRow()).setStockMin(pc.getStockMin());
        listapr.get(jTable2.getSelectedRow()).setSubtotal(pc.getSubtotal());
        listapr.get(jTable2.getSelectedRow()).setTotal(pc.getTotal());
        listapr.get(jTable2.getSelectedRow()).setUtilidad(pc.getUtilidad());
        listapr.get(jTable2.getSelectedRow()).setCadenaCascada(pc.getCadenaCascada());
        
       // System.out.println(listapr.get(jTable2.getSelectedRow()).getId());
         hpartidascompras.actualizarPCompras(pc, "id", "=", String.valueOf(listapr.get(jTable2.getSelectedRow()).getId()));
        
           jTextField2.setText("1");
           click=true;
           dtmPartidas.setValueAt(pc.getCantidad(), jTable2.getSelectedRow(), 1);
           click=true;
           dtmPartidas.setValueAt(pc.getDescripcion(), jTable2.getSelectedRow(), 2);
           click=true;
           dtmPartidas.setValueAt(df.format(pc.getPrecioCompra()), jTable2.getSelectedRow(), 3);
           click=true;
           dtmPartidas.setValueAt(pc.getDescuento(), jTable2.getSelectedRow(), 4);
           if(cascada==1)
           dtmPartidas.setValueAt(pc.getCadenaCascada(), jTable2.getSelectedRow(), 4);
           click=true;
           dtmPartidas.setValueAt(df.format(pc.getCostoDesc()), jTable2.getSelectedRow(), 5);
           click=true;
           dtmPartidas.setValueAt(df.format(pc.getSubtotal()), jTable2.getSelectedRow(), 6);
           click=true;
           dtmPartidas.setValueAt(df.format(pc.getTotal()), jTable2.getSelectedRow(), 7);
           click=true;
           dtmPartidas.setValueAt(df.format(pc.getPrecioVenta()), jTable2.getSelectedRow(), 8);
           click=true;
           dtmPartidas.fireTableDataChanged();
           jTable2.getColumn("Descripción").setPreferredWidth(270);
           
          subtotal =  subtotal + pc.getSubtotal();
          iva = iva + pc.getMontoIva();
          total = total + pc.getTotal(); 
          
          jLabel16.setText(String.valueOf(listapr.size()));
          jLabel18.setText(df.format(subtotal));
          jLabel24.setText(df.format(iva));
          jLabel26.setText(df.format(total));
          jTextField2.setText("1");
          jTextField9.setText("0");
          jButton4.setEnabled(false); 
          jButton12.setEnabled(false);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jTextField4FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusLost
        // TODO add your handling code here:
         // double importeConIva=Double.valueOf(jTextField4.getText())+(Double.valueOf(jTextField4.getText()) * 0.4); 
         double importeConIva=(Double.valueOf(jTextField4.getText()) * 1.3) * (1 + CGlobalConfig.getIvaVenta()); 
         jTextField8.setText(df.format(importeConIva));
    }//GEN-LAST:event_jTextField4FocusLost

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(!proveedor.isEmpty())
        {
            proveedor.clear();
            jComboBox3.removeAllItems();
        }
        
        proveedor = hproveedor.consultaProveedores("nombre","LIKE",jTextField17.getText());
           
        if(!proveedor.isEmpty())
        {
        
           int indprov = 0;
           while(indprov < proveedor.size()) 
           {
               jComboBox3.addItem(proveedor.get(indprov).getNombre());
               indprov++;
           }
         
           
           
        }  
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField17ActionPerformed
        // TODO add your handling code here:
        jButton9.doClick();
    }//GEN-LAST:event_jTextField17ActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
        double utilidad = 0;
        double descuentoVenta = 0;
        double iva = 0;
        double subtotal = 0;
        importeConIva=Double.valueOf(jTextField6.getText());
        //utilidad = importeConIva * ((Double.valueOf(jTextField9.getText() )/100));
        // descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));
        // importeConIva = importeConIva + utilidad - descuentoVenta;
        
        descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));             
        importeConIva = importeConIva - descuentoVenta;
        utilidad = ((Double.valueOf(jTextField9.getText() )/100)) * importeConIva;
        importeConIva = importeConIva + utilidad;
        
        iva = importeConIva * CGlobalConfig.getIvaVenta();
        subtotal = importeConIva + iva;
        
        jTextField8.setText(df.format(subtotal));
        jTextField9.setText("0");
        jTextField7.setText("0");
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
        double utilidad = 0;
        double descuentoVenta = 0;
        importeConIva=Double.valueOf(jTextField8.getText());
        // utilidad = importeConIva * ((Double.valueOf(jTextField9.getText() )/100));
        // descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));
        // importeConIva = importeConIva + utilidad - descuentoVenta;
        
        descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));             
        importeConIva = importeConIva - descuentoVenta;
        utilidad = ((Double.valueOf(jTextField9.getText() )/100)) * importeConIva;
        importeConIva = importeConIva + utilidad;
        
        jTextField6.setText(df.format(importeConIva));
        jTextField9.setText("0");
        jTextField7.setText("0");
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        
        
        double sinIva = Double.valueOf(jTextField4.getText());
        sinIva = sinIva / (1+CGlobalConfig.getIvaVenta());
        jTextField4.setText(df.format(sinIva));
        
        descuento = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());              
        porcostodesc = Double.valueOf(jTextField4.getText()) - descuento;
        cargos = (Double.valueOf(jTextField3.getText())/100) * porcostodesc;
        porcostodesc = porcostodesc + cargos;
        
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        }
        
        
        
        jTextField6.setText(df.format(porcostodesc));
        importeConIva=porcostodesc+(porcostodesc * 0.3);
      //  System.out.println(porcostodesc);
        importeConIva=importeConIva+(importeConIva * CGlobalConfig.getIvaVenta());
      //  System.out.println(importeConIva);
        jTextField8.setText(df.format(importeConIva));
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        double sinIva = Double.valueOf(jTextField8.getText());
        sinIva = sinIva / (1+CGlobalConfig.getIvaVenta());
        jTextField8.setText(df.format(sinIva));
        
        // TODO add your handling code here:
        double utilidad = 0;
        double descuentoVenta = 0;
        importeConIva=Double.valueOf(jTextField8.getText());
        utilidad = importeConIva * ((Double.valueOf(jTextField9.getText() )/100));
        descuentoVenta = importeConIva * (Double.valueOf(jTextField7.getText())/100);
        importeConIva = importeConIva + utilidad - descuentoVenta;
        jTextField8.setText(df.format(importeConIva));
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1)
        {
        JOptionPane.showMessageDialog(null, "Por favor seleccione una partida");
        return;
        }
                
        if(proveedor.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero un proveedor");
            return;
        }
        
        if(!Validadores.validarEntero("Descuento", jTextField5.getText()))
        return;
        if(!Validadores.validarDoble("Precio Compra", jTextField4.getText()))
        return; 
        if(!Validadores.validarEntero("Cargos", jTextField3.getText()))
        return;     
        
        
        
        porcentajeDesc = Double.valueOf(jTextField5.getText()).intValue();
        porcentajeCosto = Integer.valueOf(jTextField3.getText());
        cascada = 0; 
        descuento = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());              
        porcostodesc = Double.valueOf(jTextField4.getText()) - descuento;
        cargos = (Double.valueOf(jTextField3.getText())/100) * porcostodesc;
        porcostodesc = porcostodesc + cargos;
        
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        cascada = 1;
        }
        
        
        jTextField6.setText(df.format(porcostodesc));
        importeConIva=porcostodesc+(porcostodesc * 0.3);
      //  System.out.println(porcostodesc);
        importeConIva=importeConIva+(importeConIva * (Double.valueOf(listaArticulos.get(jTable1.getSelectedRow()).getIva())/100));
      //  System.out.println(importeConIva);
        jTextField8.setText(df.format(importeConIva));
        bajarPartida = true;
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1)
        {
        JOptionPane.showMessageDialog(null, "Por favor seleccione una partida");
        return;
        }
        
        
         if(proveedor.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero un proveedor");
            return;
        }
        
         
         
        if(!Validadores.validarEntero("Descuento", jTextField5.getText()))
        return;
        if(!Validadores.validarDoble("Precio Compra", jTextField4.getText()))
        return; 
        if(!Validadores.validarEntero("Cargos", jTextField3.getText()))
        return;     
         
        porcentajeDesc = Double.valueOf(jTextField5.getText()).intValue();
        porcentajeCosto = Integer.valueOf(jTextField3.getText());
        cascada = 0;
        descuento = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());              
        porcostodesc = Double.valueOf(jTextField4.getText()) - descuento;
        cargos = (Double.valueOf(jTextField3.getText())/100) * porcostodesc;
        porcostodesc = porcostodesc + cargos;
        
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        cascada = 1;
        }
                
        jTextField6.setText(df.format(porcostodesc));
        importeConIva=porcostodesc+(porcostodesc * 0.3);
      //  System.out.println(porcostodesc);
        importeConIva=importeConIva+(importeConIva * (Double.valueOf(listaArticulos.get(jTable1.getSelectedRow()).getIva())/100));
      //  System.out.println(importeConIva);
        jTextField8.setText(df.format(importeConIva));
        bajarPartida = true;
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
                // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1)
        {
        JOptionPane.showMessageDialog(null, "Por favor seleccione una partida");
        return;
        }
        
        if(proveedor.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero un proveedor");
            return;
        }
        
        if(!Validadores.validarEntero("Descuento", jTextField5.getText()))
        return;
        if(!Validadores.validarDoble("Precio Compra", jTextField4.getText()))
        return; 
        if(!Validadores.validarEntero("Cargos", jTextField3.getText()))
        return;     
        
        porcentajeDesc = Double.valueOf(jTextField5.getText()).intValue();
        porcentajeCosto = Integer.valueOf(jTextField3.getText());
        cascada = 0;
        descuento = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());              
        porcostodesc = Double.valueOf(jTextField4.getText()) - descuento;
        cargos = (Double.valueOf(jTextField3.getText())/100) * porcostodesc;
        porcostodesc = porcostodesc + cargos;
        
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        cascada = 1;
        }
        
        jTextField6.setText(df.format(porcostodesc));
        importeConIva=porcostodesc+(porcostodesc * 0.3);
      //  System.out.println(porcostodesc);
        importeConIva=importeConIva+(importeConIva * (Double.valueOf(listaArticulos.get(jTable1.getSelectedRow()).getIva())/100));
      //  System.out.println(importeConIva);     
        jTextField8.setText(df.format(importeConIva));
        bajarPartida = true;
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        
        // TODO add your handling code here:
        if(jTable1.getSelectedRow() == -1)
        {
        JOptionPane.showMessageDialog(null, "Por favor seleccione una partida");
        return;
        }
       
         
        if(proveedor.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Por favor seleccione primero un proveedor");
            return;
        } 
        
        try
        {
            Double.valueOf(jTextField4.getText());
            Integer.valueOf(jTextField3.getText());
            Integer.valueOf(jTextField5.getText());
            
        }catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Uno de los campos costo, descuento o cargos no es un número, por favor verifiquelo");
            return;
        }
        
        
        porcentajeDesc = Integer.valueOf(jTextField5.getText());
        porcentajeCosto = Integer.valueOf(jTextField3.getText());
        cascada = 0;
        descuento = (Double.valueOf(jTextField5.getText())/100) * Double.valueOf(jTextField4.getText());       
        cargos = (Double.valueOf(jTextField3.getText())/100) * Double.valueOf(jTextField4.getText());
        porcostodesc = Double.valueOf(jTextField4.getText()) +cargos - descuento;
        
        if(jCheckBox1.isSelected())
        {
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc1().doubleValue() /100  )* porcostodesc);    
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc2().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc3().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc4().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc5().doubleValue()/100)* porcostodesc);
        porcostodesc = porcostodesc - ((proveedor.get(jComboBox3.getSelectedIndex()).getDesc6().doubleValue() /100)* porcostodesc);
        cascada = 1;
        }
        
        
        
        jTextField6.setText(df.format(porcostodesc));
     //   importeConIva=(porcostodesc * 1.3) * (1 + CGlobalConfig.getIvaVenta()); 
     //   jTextField8.setText(df.format(importeConIva));        
        importeConIva=porcostodesc+(porcostodesc * 0.3);
      //  System.out.println(porcostodesc);
        importeConIva=importeConIva+(importeConIva * (Double.valueOf(listaArticulos.get(jTable1.getSelectedRow()).getIva())/100));
      //  System.out.println(importeConIva);
        jTextField8.setText(df.format(importeConIva));
        bajarPartida = true;
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
        double utilidad = 0;
        double descuentoVenta = 0;
        importeConIva=Double.valueOf(jTextField8.getText());
    //    utilidad = importeConIva * ((Double.valueOf(jTextField9.getText() )/100));
    //    descuentoVenta = importeConIva * (Double.valueOf(jTextField7.getText())/100);
    //    importeConIva = importeConIva + utilidad - descuentoVenta;
        
        descuentoVenta = importeConIva * ((Double.valueOf(jTextField7.getText())/100));             
        importeConIva = importeConIva - descuentoVenta;
        utilidad = ((Double.valueOf(jTextField9.getText() )/100)) * importeConIva;
        importeConIva = importeConIva + utilidad;
        
        jTextField8.setText(df.format(importeConIva));
        jTextField9.setText("0");
        jTextField7.setText("0");
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        jButton1.doClick();
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:       
	   try{
        long comprada= hcompras.consultaComprasComprada(compras.getId());
        if(Long.compare(comprada, (long)1)==0)
        {
            JOptionPane.showMessageDialog(null, "Esta compra ya fue realizada");
            return;
        }
        
         if(Long.compare(comprada, -1)==0)
        {
            JOptionPane.showMessageDialog(null, "Esta compra no existe");
            return;
        }
                
        if(!CPrincipal.getConexion().crearTransaccion())
        return;
            
        int cantidadArticulo=0;
        for(int i=0; i<listapr.size();i++)
        {
            cantidadArticulo = cantidadArticulo + listapr.get(i).getCantidad();
        }
		
        compras.setCargos(Double.valueOf(jTextField15.getText()));    
        compras.setCodigoProveedor(proveedor.get(jComboBox3.getSelectedIndex()).getId());
        compras.setDescAdic(String.valueOf(desadi));
        compras.setDiasCred(proveedor.get(jComboBox3.getSelectedIndex()).getDiasCredito());
        compras.setImporte(total);
        compras.setNumRefComp(jTextField12.getText());
        compras.setIdUsuario(String.valueOf(CConfiguracion.getId()));
        compras.setCantidadArticulos(String.valueOf(cantidadArticulo));
        hcompras.actualizarComprasLast(compras, "id", "=", String.valueOf(compras.getId()) );
        
        
        List<Partidascomprasmayoreo> listatemporal = new ArrayList<Partidascomprasmayoreo>();
        /* listapr.get(indparti).setCompra((long)numcompra);
        hpartidascompras.guardarPCompras(listapr.get(indparti)); */
        
        
        
        if(listapr.size() >= respaldopr.size())
        {
       for(int e=0; e<listapr.size(); e++)
        {
            listatemporal.add(listapr.get(e));
        }    
          int i = 0;     
           while(i<listatemporal.size())
           {  
          int indrespaldo=0;
          while(indrespaldo<respaldopr.size())
          {
              if(listatemporal.get(i).getArticulo().equals(respaldopr.get(indrespaldo).getArticulo()) &&
              Integer.compare(listatemporal.get(i).getCantidad(),respaldopr.get(indrespaldo).getCantidad()) == 0 &&
              Double.compare(listatemporal.get(i).getPrecioVenta(),respaldopr.get(indrespaldo).getPrecioVenta())==0
              && Long.compare(listatemporal.get(i).getId(),respaldopr.get(indrespaldo).getId())==0     
              )    
              /* if(listapr.get(i).getArticulo().equals(respaldopr.get(indrespaldo).getArticulo()) &&
              listapr.get(i).getCantidad() == respaldopr.get(indrespaldo).getCantidad() &&
              listapr.get(i).getPrecioVenta() == respaldopr.get(indrespaldo).getPrecioVenta()
              && listapr.get(i).getId() == respaldopr.get(indrespaldo).getId()    
              )  */     
           {      
               
           for(int u=0; u<listapr.size(); u++)
               {
              if(listatemporal.get(i).getArticulo().equals(listapr.get(u).getArticulo()) &&
              Integer.compare(listatemporal.get(i).getCantidad(),listapr.get(u).getCantidad()) == 0 &&
              Double.compare(listatemporal.get(i).getPrecioVenta(),listapr.get(u).getPrecioVenta())==0
              && Long.compare(listatemporal.get(i).getId(),listapr.get(u).getId())==0     
              )   
                   listapr.remove(u);    
               }
               respaldopr.remove(indrespaldo);
               
           }
            indrespaldo++;
          }
              i++;    
           }
           
        }else
        {
        for(int e=0; e<respaldopr.size(); e++)
        {
            listatemporal.add(respaldopr.get(e));
        }      
            
          int i = 0;     
           while(i<listatemporal.size())
           {
          int indrespaldo=0;
          while(indrespaldo<listapr.size())
          {
             /* if(listapr.get(indrespaldo).getArticulo().equals(respaldopr.get(i).getArticulo()) &&
              Integer.compare(listapr.get(indrespaldo).getCantidad(),respaldopr.get(i).getCantidad()) == 0 &&
              Double.compare(listapr.get(indrespaldo).getPrecioVenta(),respaldopr.get(i).getPrecioVenta())==0
              && Long.compare(listapr.get(indrespaldo).getId(),respaldopr.get(i).getId())==0     
              ) */   
              if(listapr.get(indrespaldo).getArticulo().equals(listatemporal.get(i).getArticulo()) &&
              listapr.get(indrespaldo).getCantidad() == listatemporal.get(i).getCantidad() &&
              listapr.get(indrespaldo).getPrecioVenta() == listatemporal.get(i).getPrecioVenta() &&
              listapr.get(indrespaldo).getId() == listatemporal.get(i).getId()     
              )   
           {
                       
               listapr.remove(indrespaldo);
               
               for(int u=0; u<respaldopr.size(); u++)
               {
              if(respaldopr.get(u).getArticulo().equals(listatemporal.get(i).getArticulo()) &&
              respaldopr.get(u).getCantidad() == listatemporal.get(i).getCantidad() &&
              respaldopr.get(u).getPrecioVenta() == listatemporal.get(i).getPrecioVenta() &&
              respaldopr.get(u).getId() == listatemporal.get(i).getId()     
              )   
                   respaldopr.remove(u);    
               }
               
           }
            indrespaldo++;
          }
          i++;
           } 
        }
        
           
                
        int eliminarp = 0;
        while(eliminarp < respaldopr.size())
        {
            hpartidascompras.borrarPCompras("id", "=", String.valueOf(respaldopr.get(eliminarp).getId()));
            eliminarp++;
        }
        
        int indparti=0;
        while(indparti<listapr.size())
        {    
        listapr.get(indparti).setCompra(compras.getId());
        hpartidascompras.guardarPCompras(listapr.get(indparti)); 
        indparti++;
        }
        
        CPrincipal.getConexion().finalizarTransaccion();
        
        try
        {
        VCatalogo_Articulos.boton1.doClick();
	VCatalogo_Pedidos.boton1.doClick();
        }catch(NullPointerException e)
        {
         System.out.println("El catálogo de artículos o pedidos estaba cerrado :)");   
        }
        
        
        JOptionPane.showMessageDialog(null,"Partidas actualizadas en compra "+compras.getId());
        limpiar();
         } catch(Exception e)
        {
            CPrincipal.getConexion().cancelarTransaccion();
            e.printStackTrace();            
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
    hArticulos articulos;
    hComprasMayoreo hcompras;
    hPartidasComprasMayoreo hpartidascompras;
    List<Articulos> listaArticulos;
    List<Articulos> actualizarArticulos;
    List<Partidascomprasmayoreo> listapr,respaldopr;
    Vector vector,vectorPartidas;
    hAlmacendevoluciones halmacendevoluciones;
    DefaultTableModel dtm,dtmPartidas;
    Vector<String> encabezadoArticulos,encabezadoPartidas;
    List <Proveedores> proveedor;
    List <String> publicarParaRed;
    hProveedores hproveedor;
    ComprasMayoreo compras;
    Double subtotal=0.00;
    Double iva=0.0;
    Double total = 0.0;
    Double desadi = 0.0;
    Integer cantidadAr=0;
    DecimalFormat df;
    Kardex kardex;
    hKardex hkardex;
    boolean click=false; 
    hArticuloProveedor harticuloproveedor;
    boolean bandera=false;
    Double importeConIva = 0.0;
    Double cargos = 0.0;
    Double descuento = 0.0;
    Double porcostodesc = 0.0;
    Double importeCompra = 0.0;
    Integer porcentajeDesc = 0;
    Integer porcentajeCosto = 0;
    Integer cascada = 0;
    Integer ivaArticulo=0;
    boolean banderaTabla1 = true;
    boolean bajarPartida = false;
    
    private void inicializar(ComprasMayoreo compra) {    
   if(compra.getCompra()==1)     
   {
       
   hCuentasPorPagar hcuentasporpagar = new hCuentasPorPagar(); 
   List<Cuentasporpagar> cuentasporpagar = hcuentasporpagar.consultaCuentasPorPagar("compra", "=", String.valueOf(compra.getId()));
   
   Calendar calendario = Calendar.getInstance();
   if(cuentasporpagar.isEmpty())
   {
   String fecha  = compra.getFechaCompra();  
   
   String año = fecha.substring(0,4);
   String mes = fecha.substring(5,7);
   String dia = fecha.substring(8,10);
   
   int edia=Integer.valueOf(dia);
   int emes = Integer.valueOf(mes);
   int eaño = Integer.valueOf(año);
   emes--;
   calendario.set(eaño, emes, edia);       
   }else
   {
   String fecha = cuentasporpagar.get(0).getFechaExpiracion();
   if(!fecha.equals("0000-00-00"))
     {
   String año = fecha.substring(0,4);
   String mes = fecha.substring(5,7);
   String dia = fecha.substring(8,10);

   
   int edia=Integer.valueOf(dia);
   int emes = Integer.valueOf(mes);
   int eaño = Integer.valueOf(año);
   System.out.println(edia+" "+emes+" "+eaño);
   
   emes--;
   calendario.set(eaño, emes, edia);   
   
     }
   }
   dateChooserCombo1.setSelectedDate(calendario);     
   dateChooserCombo1.setEnabled(false);  
   }
        
    jButton4.setEnabled(CConfiguracion.isActualizarPedidos());    
    jButton8.setEnabled(CConfiguracion.isActualizarPedidos());    
    publicarParaRed = new ArrayList<String>();
    kardex = new Kardex();
    hkardex = new hKardex();
    harticuloproveedor = new hArticuloProveedor();
    df = new DecimalFormat("0.00");
    articulos = new hArticulos();
    listaArticulos = new ArrayList<Articulos>();
    actualizarArticulos = new ArrayList<Articulos>();
    halmacendevoluciones = new hAlmacendevoluciones();
    
        encabezadoArticulos = new Vector<String>();
        encabezadoArticulos.add("Código");
        encabezadoArticulos.add("Descripción");
        encabezadoArticulos.add("Compra");
        encabezadoArticulos.add("Ultimo Costo");
        encabezadoArticulos.add("Precio Venta");
        encabezadoArticulos.add("Existencia");
        encabezadoArticulos.add("En A. Devoluciones");
        encabezadoArticulos.add("Reservados");
        
        
        vector = new Vector();
    dtm = new DefaultTableModel(vector,encabezadoArticulos) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };

           jTable1.setModel(dtm);
           jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
           jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
        if(jTable1.getSelectedRow() ==-1)
            return;
         
        if(banderaTabla1) //esta bandera está aquí para que no se hagan cambios cuando se seleccione esta tabla...
        {
        jTextField4.setText(df.format(listaArticulos.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow())).getPrecioCompra()));
        jTextField10.setText(String.valueOf(listaArticulos.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow())).getMinimoPzas()));
        jTextField11.setText(String.valueOf(listaArticulos.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow())).getMaximoPzas()));     
            
        
        double cargo = 0;
        double descuento = 0;
        double importeConIva=(Double.valueOf(jTextField4.getText()) * 1.3) * (1 + CGlobalConfig.getIvaVenta()); 
        
        jTextField7.setText("0"); 
        cargo = importeConIva * Double.valueOf(jTextField3.getText());
        descuento = importeConIva * (Double.valueOf(jTextField5.getText())/100);
        importeConIva = importeConIva + cargo - descuento;
        jTextField8.setText(df.format(importeConIva));
        jTextField9.setText("0");
        
        porcentajeDesc = 0;
        porcentajeCosto = 0;
        cascada = 0;
        descuento = 0.0;       
        cargos = 0.0;
        porcostodesc = listaArticulos.get(jTable1.convertRowIndexToModel(jTable1.getSelectedRow())).getPrecioCompra();
        }
            }
        });

           
           proveedor = new ArrayList<Proveedores>();
           hproveedor = new hProveedores();
           proveedor = hproveedor.consultaProveedores("id","=",String.valueOf(compra.getCodigoProveedor()));
           
           int indprov = 0;
           while(indprov < proveedor.size()) 
           {
               jComboBox3.addItem(proveedor.get(indprov).getNombre());
               jComboBox4.addItem(proveedor.get(indprov).getDesc1());
               jComboBox4.addItem(proveedor.get(indprov).getDesc2());
               jComboBox4.addItem(proveedor.get(indprov).getDesc3());
               jComboBox4.addItem(proveedor.get(indprov).getDesc4());
               jComboBox4.addItem(proveedor.get(indprov).getDesc5());
               jComboBox4.addItem(proveedor.get(indprov).getDesc6());

               indprov++;
           }
           
           compras = new ComprasMayoreo();
           compras.setBanco(compra.getBanco());
           compras.setCargos(compra.getCargos());
           compras.setCheque(compra.getCheque());
           compras.setCodigoPedido(compra.getCodigoPedido());
           compras.setCodigoProveedor(compra.getCodigoProveedor());
           compras.setCompra(compra.getCompra());
           compras.setDescAdic(compra.getDescAdic());
           compras.setDevolucion(compra.getDevolucion());
           compras.setDiasCred(compra.getDiasCred());
           compras.setFechaCompra(compra.getFechaCompra());
           compras.setImporte(compra.getImporte());
           compras.setNumRefComp(compra.getNumRefComp());
           compras.setObservacion(compra.getObservacion());
           compras.setPedido(compra.getPedido());
           compras.setTipoPago(compra.getTipoPago());
           compras.setId(compra.getId());
           compras.setFactura(compra.getFactura());
           compras.setIdUsuario(compra.getIdUsuario());
           compras.setCantidadArticulos(compra.getCantidadArticulos());
           compras.setTn(compra.getTn());
           
           hcompras = new hComprasMayoreo();
           
        jTextField18.setText(compras.getFactura());
        jTextField12.setText(compras.getNumRefComp());
        jTextField16.setText(compras.getObservacion());
        jTextField19.setText(compras.getTn());
           
           
        hpartidascompras = new hPartidasComprasMayoreo();   
        listapr = new ArrayList<Partidascomprasmayoreo>();
        respaldopr = new ArrayList<Partidascomprasmayoreo>();
        listapr = hpartidascompras.consultaPCompras("compra", "=", String.valueOf(compras.getId()));
        encabezadoPartidas = new Vector<String>();
        encabezadoPartidas.add("Código");
        encabezadoPartidas.add("Cantidad");
        encabezadoPartidas.add("Descripción");
        encabezadoPartidas.add("Costo");
        encabezadoPartidas.add("Descuento");
        encabezadoPartidas.add("Costo con Descuento");
        encabezadoPartidas.add("Subtotal");
        encabezadoPartidas.add("Total");
        encabezadoPartidas.add("Precio Venta");
        vectorPartidas = new Vector();
 
           
           for(Object o : listapr)
           {
           Partidascomprasmayoreo pc =  (Partidascomprasmayoreo)o;       
               
           Partidascomprasmayoreo partidarespaldo = new Partidascomprasmayoreo();
           partidarespaldo.setArticulo(pc.getArticulo());
           partidarespaldo.setCantidad(pc.getCantidad());    
           partidarespaldo.setCargoArticulo(pc.getCargoArticulo());
           partidarespaldo.setCompra(pc.getCompra());
           partidarespaldo.setCostoDesc(pc.getCostoDesc());
           partidarespaldo.setDescripcion(pc.getDescripcion());
           partidarespaldo.setDescuento(pc.getDescuento());
           partidarespaldo.setDescuentoArti(pc.getDescuentoArti());
           partidarespaldo.setDevuelta(pc.getDevuelta());
           partidarespaldo.setIva(pc.getIva());
           partidarespaldo.setMontoIva(pc.getMontoIva());
           partidarespaldo.setPorcCargo(pc.getPorcCargo());
           partidarespaldo.setPrecioUni(pc.getPrecioUni());
           partidarespaldo.setPrecioVenta(pc.getPrecioVenta());
           partidarespaldo.setSubtotal(pc.getSubtotal());
           partidarespaldo.setTotal(pc.getTotal());
           partidarespaldo.setId(pc.getId());
           partidarespaldo.setCadenaCascada(pc.getCadenaCascada());
           partidarespaldo.setMotivoDevolucion(pc.getMotivoDevolucion());
           partidarespaldo.setReferencia(pc.getReferencia());
           respaldopr.add(partidarespaldo);    
           
           Vector<Object> unaFila = new Vector<Object>();
           unaFila.add(pc.getArticulo());
           unaFila.add(pc.getCantidad());
           unaFila.add(pc.getDescripcion());
           unaFila.add(df.format(pc.getPrecioCompra()));
           if(Integer.compare(pc.getCascada(), 0)==0)
           unaFila.add(pc.getDescuento());
           else
           /* unaFila.add("C "+proveedor.get(0).getDesc1()+"+"+proveedor.get(0).getDesc2()+"+"+proveedor.get(0).getDesc3()+"+"+
                            proveedor.get(0).getDesc4()+"+"+proveedor.get(0).getDesc5()+"+"+proveedor.get(0).getDesc6());  */
              unaFila.add(pc.getCadenaCascada()); 
           unaFila.add(df.format(pc.getCostoDesc()));
           unaFila.add(df.format(pc.getSubtotal()));
           unaFila.add(df.format(pc.getTotal()));
           unaFila.add(df.format(pc.getPrecioVenta()));
           vectorPartidas.add(unaFila);
           }
           
           dtmPartidas = new DefaultTableModel(vectorPartidas,encabezadoPartidas) {

              @Override
              public boolean isCellEditable(int row, int column) {
              return false;
                }
              };
           
           

           jTable2.setModel(dtmPartidas);   
           jTable2.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
           jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                
          if(jTable2.getRowCount() == -1)return;      
                
        if(jTable2.getRowCount()>0||jTable2.getRowCount()<listapr.size())
        {  
            try{
                            if(jTable2.getSelectedRow() > -1)
                {
           jTextField2.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getCantidad())); 
           jTextField3.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getPorcCargo()));
           jTextField4.setText(df.format(listapr.get(jTable2.getSelectedRow()).getPrecioCompra()));
           jTextField6.setText(df.format(listapr.get(jTable2.getSelectedRow()).getCostoDesc()));
           jTextField5.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getDescuento().intValue()));
           // jTextField7.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getDescuento())); 
           jTextField8.setText(df.format(listapr.get(jTable2.getSelectedRow()).getPrecioVenta()));
          // jTextField9.setText(df.format(listapr.get(jTable2.getSelectedRow()).getUtilidad()));
          // jTextField10.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getStockMin())); 
          // jTextField11.setText(String.valueOf(listapr.get(jTable2.getSelectedRow()).getStockMax())); 
           
        if(listapr.get(jTable2.getSelectedRow()).getCascada() == 1)   
            jCheckBox1.setSelected(true);
        else
            jCheckBox1.setSelected(false);
        
           
        porcentajeDesc = listapr.get(jTable2.getSelectedRow()).getDescuento().intValue();
        porcentajeCosto = listapr.get(jTable2.getSelectedRow()).getPorcCargo();
        cascada = listapr.get(jTable2.getSelectedRow()).getCascada();
        descuento = listapr.get(jTable2.getSelectedRow()).getDescuentoArti();       
        cargos = listapr.get(jTable2.getSelectedRow()).getCargoArticulo();
        porcostodesc = listapr.get(jTable2.getSelectedRow()).getCostoDesc();
        importeConIva = listapr.get(jTable2.getSelectedRow()).getPrecioVenta();
           
        if(!listaArticulos.isEmpty())
        listaArticulos.clear();
        listaArticulos = articulos.consultaArticulos("codigo","=", listapr.get(jTable2.getSelectedRow()).getArticulo());
        vector.clear();
        

         for(Object o: listaArticulos){
             Articulos iarticulos = (Articulos)o;
             Vector<Object> unaFila = new Vector<Object>();
             unaFila.add(iarticulos.getCodigo());
             unaFila.add(iarticulos.getDescripcion());
             unaFila.add(df.format(iarticulos.getPrecioCompra()));
             unaFila.add(df.format(iarticulos.getUltimoCosto()));
             unaFila.add(df.format(iarticulos.getPrecioVenta()));
             unaFila.add(iarticulos.getExistencia());
             ivaArticulo = iarticulos.getIva();
          /*   int acumulado = 0;
             List<Almacendevoluciones> listadev = halmacendevoluciones.consultaPartidas("codigoArticulo", "=", iarticulos.getCodigo());
             int suma=0;
             while(suma<listadev.size())
             {
                 acumulado = acumulado + listadev.get(suma).getCantidad();
                 suma++;
             } */
             unaFila.add(iarticulos.getAlmacenDevoluciones());
             unaFila.add(iarticulos.getReservado());
             vector.add(unaFila);
         }
         
            dtm.fireTableDataChanged();
            
         jTextField10.setText(String.valueOf(listaArticulos.get(0).getMinimoPzas()));
         jTextField11.setText(String.valueOf(listaArticulos.get(0).getMaximoPzas()));   
         banderaTabla1 = false;
         jTable1.setRowSelectionInterval(0, 0);
         banderaTabla1 = true;
           
                }
            }catch(java.lang.ArrayIndexOutOfBoundsException exe)
            {
                System.out.println("");
            }
           
        }
            }
        }); 
           
          
          int it1=0;
          while(it1 < listapr.size())
          {
              subtotal = subtotal + (listapr.get(it1).getCostoDesc() * listapr.get(it1).getCantidad());
              iva = iva + (listapr.get(it1).getCostoDesc() * listapr.get(it1).getCantidad() * ((double)listapr.get(it1).getIva()/100));
              total = subtotal + iva;
              cantidadAr = cantidadAr + listapr.get(it1).getCantidad();
              it1++;
          }
          
          
          jLabel16.setText(String.valueOf(listapr.size()));
          jLabel18.setText(df.format(subtotal));
          jLabel24.setText(df.format(iva));
          jLabel26.setText(df.format(total));
          jLabel33.setText(String.valueOf(cantidadAr));
          
        if(compras.getCompra() == 1)
        {
        jTextField1.setEditable(false);    
        jTextField2.setEditable(false);    
        jTextField3.setEditable(false);    
        jTextField4.setEditable(false);    
        jTextField5.setEditable(false);    
        jTextField7.setEditable(false);    
        jTextField8.setEditable(false);    
        jTextField9.setEditable(false);    
        jTextField10.setEditable(false);    
        jTextField11.setEditable(false); 
        jTextField13.setEditable(false);    
        jTextField14.setEditable(false);    
        jTextField15.setEditable(false);   
        jTextField16.setEditable(false);  
        jComboBox1.setEnabled(false);
        jComboBox2.setEnabled(false);
        jComboBox4.setEnabled(false);
        jButton1.setEnabled(false);    
        jButton2.setEnabled(false);    
        jButton3.setEnabled(false);    
        jButton8.setEnabled(false);    
        jButton10.setEnabled(false);    
        jButton11.setEnabled(false);    
        jButton6.setEnabled(false);    
        jButton4.setText("Actualizar Compra");   
        
        }
    }
}
